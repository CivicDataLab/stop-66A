{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/TimeseriesExplorer.js\";\nimport TimeseriesLoader from './loaders/Timeseries';\nimport { TIMESERIES_CHART_TYPES, TIMESERIES_LOOKBACKS, STATE_NAMES } from '../constants';\nimport useIsVisible from '../hooks/useIsVisible';\nimport { getIndiaYesterdayISO, parseIndiaDate } from '../utils/commonFunctions';\nimport { IssueOpenedIcon, PinIcon, ReplyIcon } from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport { formatISO, sub } from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, { useCallback, useMemo, useRef, lazy, Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocalStorage, useSessionStorage } from 'react-use';\nconst Timeseries = lazy(() => import('./Timeseries'));\n\nfunction TimeseriesExplorer({\n  stateCode,\n  timeseries,\n  date: timelineDate,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  expandTable\n}) {\n  const {\n    t\n  } = useTranslation();\n  const [lookback, setLookback] = useSessionStorage('timeseriesLookback', TIMESERIES_LOOKBACKS.MONTH);\n  const [chartType, setChartType] = useLocalStorage('chartType', 'total');\n  const [isUniform, setIsUniform] = useLocalStorage('isUniform', true);\n  const [isLog, setIsLog] = useLocalStorage('isLog', false);\n  const explorerElement = useRef();\n  const isVisible = useIsVisible(explorerElement, {\n    once: true\n  });\n  const selectedRegion = useMemo(() => {\n    var _timeseries$regionHig;\n\n    if (timeseries === null || timeseries === void 0 ? void 0 : (_timeseries$regionHig = timeseries[regionHighlighted.stateCode]) === null || _timeseries$regionHig === void 0 ? void 0 : _timeseries$regionHig.districts) {\n      return {\n        stateCode: regionHighlighted.stateCode,\n        districtName: regionHighlighted.districtName\n      };\n    } else {\n      return {\n        stateCode: regionHighlighted.stateCode,\n        districtName: null\n      };\n    }\n  }, [timeseries, regionHighlighted.stateCode, regionHighlighted.districtName]);\n  const selectedTimeseries = useMemo(() => {\n    if (selectedRegion.districtName) {\n      var _timeseries$selectedR, _timeseries$selectedR2, _timeseries$selectedR3;\n\n      return timeseries === null || timeseries === void 0 ? void 0 : (_timeseries$selectedR = timeseries[selectedRegion.stateCode]) === null || _timeseries$selectedR === void 0 ? void 0 : (_timeseries$selectedR2 = _timeseries$selectedR.districts) === null || _timeseries$selectedR2 === void 0 ? void 0 : (_timeseries$selectedR3 = _timeseries$selectedR2[selectedRegion.districtName]) === null || _timeseries$selectedR3 === void 0 ? void 0 : _timeseries$selectedR3.dates;\n    } else {\n      var _timeseries$selectedR4;\n\n      return timeseries === null || timeseries === void 0 ? void 0 : (_timeseries$selectedR4 = timeseries[selectedRegion.stateCode]) === null || _timeseries$selectedR4 === void 0 ? void 0 : _timeseries$selectedR4.dates;\n    }\n  }, [timeseries, selectedRegion.stateCode, selectedRegion.districtName]);\n  const regions = useMemo(() => {\n    const states = Object.keys(timeseries || {}).filter(code => code !== stateCode).sort((code1, code2) => STATE_NAMES[code1].localeCompare(STATE_NAMES[code2])).map(code => {\n      return {\n        stateCode: code,\n        districtName: null\n      };\n    });\n    const districts = Object.keys(timeseries || {}).reduce((acc1, code) => {\n      var _timeseries$code;\n\n      return [...acc1, ...Object.keys((timeseries === null || timeseries === void 0 ? void 0 : (_timeseries$code = timeseries[code]) === null || _timeseries$code === void 0 ? void 0 : _timeseries$code.districts) || {}).reduce((acc2, districtName) => {\n        return [...acc2, {\n          stateCode: code,\n          districtName: districtName\n        }];\n      }, [])];\n    }, []);\n    return [{\n      stateCode: stateCode,\n      districtName: null\n    }, ...states, ...districts];\n  }, [timeseries, stateCode]);\n  const dropdownRegions = useMemo(() => {\n    if (regions.find(region => region.stateCode === regionHighlighted.stateCode && region.districtName === regionHighlighted.districtName)) return regions;\n    return [...regions, {\n      stateCode: regionHighlighted.stateCode,\n      districtName: regionHighlighted.districtName\n    }];\n  }, [regionHighlighted.stateCode, regionHighlighted.districtName, regions]);\n  const dates = useMemo(() => {\n    const cutOffDateUpper = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(selectedTimeseries || {}).filter(date => date <= cutOffDateUpper);\n    const lastDate = pastDates[pastDates.length - 1];\n\n    if (lookback === TIMESERIES_LOOKBACKS.BEGINNING) {\n      return pastDates;\n    }\n\n    let cutOffDateLower;\n\n    if (lookback === TIMESERIES_LOOKBACKS.MONTH) {\n      cutOffDateLower = formatISO(sub(parseIndiaDate(lastDate), {\n        months: 1\n      }), {\n        representation: 'date'\n      });\n    } else if (lookback === TIMESERIES_LOOKBACKS.THREE_MONTHS) {\n      cutOffDateLower = formatISO(sub(parseIndiaDate(lastDate), {\n        months: 3\n      }), {\n        representation: 'date'\n      });\n    }\n\n    return pastDates.filter(date => date >= cutOffDateLower);\n  }, [selectedTimeseries, timelineDate, lookback]);\n  const handleChange = useCallback(({\n    target\n  }) => {\n    setRegionHighlighted(JSON.parse(target.value));\n  }, [setRegionHighlighted]);\n  const resetDropdown = useCallback(() => {\n    setRegionHighlighted({\n      stateCode: stateCode,\n      districtName: null\n    });\n  }, [stateCode, setRegionHighlighted]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames('TimeseriesExplorer fadeInUp', {\n      stickied: anchor === 'timeseries'\n    }, {\n      expanded: expandTable\n    }),\n    style: {\n      display: anchor === 'mapexplorer' ? 'none' : ''\n    },\n    ref: explorerElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timeseries-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames('anchor', {\n      stickied: anchor === 'timeseries'\n    }),\n    onClick: setAnchor && setAnchor.bind(this, anchor === 'timeseries' ? null : 'timeseries'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PinIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, t('Spread Trends')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tabs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, Object.entries(TIMESERIES_CHART_TYPES).map(([ctype, value], index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: `tab ${chartType === ctype ? 'focused' : ''}`,\n    key: ctype,\n    onClick: setChartType.bind(this, ctype),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, t(value))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scale-modes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, t('Scale Modes')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timeseries-mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"timeseries-mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, t('Uniform')), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"timeseries-mode\",\n    type: \"checkbox\",\n    className: \"switch\",\n    checked: isUniform,\n    \"aria-label\": t('Checked by default to scale uniformly.'),\n    onChange: setIsUniform.bind(this, !isUniform),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: `timeseries-logmode ${chartType !== 'total' ? 'disabled' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"timeseries-logmode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, t('Logarithmic')), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"timeseries-logmode\",\n    type: \"checkbox\",\n    checked: chartType === 'total' && isLog,\n    className: \"switch\",\n    disabled: chartType !== 'total',\n    onChange: setIsLog.bind(this, !isLog),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  })))), dropdownRegions && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"state-selection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: JSON.stringify(selectedRegion),\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, dropdownRegions.filter(region => STATE_NAMES[region.stateCode] !== region.districtName).map(region => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: JSON.stringify(region),\n      key: `${region.stateCode}-${region.districtName}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }, region.districtName ? t(region.districtName) : t(STATE_NAMES[region.stateCode]));\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset-icon\",\n    onClick: resetDropdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ReplyIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }))), isVisible && /*#__PURE__*/React.createElement(Suspense, {\n    fallback: /*#__PURE__*/React.createElement(TimeseriesLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 29\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Timeseries, Object.assign({\n    timeseries: selectedTimeseries,\n    regionHighlighted: selectedRegion\n  }, {\n    dates,\n    chartType,\n    isUniform,\n    isLog\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 11\n    }\n  }))), !isVisible && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '50rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 22\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pills\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }\n  }, Object.values(TIMESERIES_LOOKBACKS).map(option => /*#__PURE__*/React.createElement(\"button\", {\n    key: option,\n    type: \"button\",\n    className: classnames({\n      selected: lookback === option\n    }),\n    onClick: () => setLookback(option),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }, t(option)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IssueOpenedIcon, {\n    size: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }\n  }, t('Tested chart is independent of uniform scaling'))));\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(currProps.regionHighlighted.stateCode, prevProps.regionHighlighted.stateCode)) {\n    return false;\n  } else if (!equal(currProps.regionHighlighted.districtName, prevProps.regionHighlighted.districtName)) {\n    return false;\n  } else if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.anchor, prevProps.anchor)) {\n    return false;\n  } else if (!equal(currProps.expandTable, prevProps.expandTable)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default React.memo(TimeseriesExplorer, isEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/TimeseriesExplorer.js"],"names":["TimeseriesLoader","TIMESERIES_CHART_TYPES","TIMESERIES_LOOKBACKS","STATE_NAMES","useIsVisible","getIndiaYesterdayISO","parseIndiaDate","IssueOpenedIcon","PinIcon","ReplyIcon","classnames","formatISO","sub","equal","React","useCallback","useMemo","useRef","lazy","Suspense","useTranslation","useLocalStorage","useSessionStorage","Timeseries","TimeseriesExplorer","stateCode","timeseries","date","timelineDate","regionHighlighted","setRegionHighlighted","anchor","setAnchor","expandTable","t","lookback","setLookback","MONTH","chartType","setChartType","isUniform","setIsUniform","isLog","setIsLog","explorerElement","isVisible","once","selectedRegion","districts","districtName","selectedTimeseries","dates","regions","states","Object","keys","filter","code","sort","code1","code2","localeCompare","map","reduce","acc1","acc2","dropdownRegions","find","region","cutOffDateUpper","pastDates","lastDate","length","BEGINNING","cutOffDateLower","months","representation","THREE_MONTHS","handleChange","target","JSON","parse","value","resetDropdown","stickied","expanded","display","bind","entries","ctype","index","stringify","height","values","option","selected","isEqual","prevProps","currProps","forceRender","memo"],"mappings":"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","sourcesContent":["import TimeseriesLoader from './loaders/Timeseries';\n\nimport {\n  TIMESERIES_CHART_TYPES,\n  TIMESERIES_LOOKBACKS,\n  STATE_NAMES,\n} from '../constants';\nimport useIsVisible from '../hooks/useIsVisible';\nimport {getIndiaYesterdayISO, parseIndiaDate} from '../utils/commonFunctions';\n\nimport {IssueOpenedIcon, PinIcon, ReplyIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport {formatISO, sub} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useCallback, useMemo, useRef, lazy, Suspense} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useLocalStorage, useSessionStorage} from 'react-use';\n\nconst Timeseries = lazy(() => import('./Timeseries'));\n\nfunction TimeseriesExplorer({\n  stateCode,\n  timeseries,\n  date: timelineDate,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  expandTable,\n}) {\n  const {t} = useTranslation();\n  const [lookback, setLookback] = useSessionStorage(\n    'timeseriesLookback',\n    TIMESERIES_LOOKBACKS.MONTH\n  );\n  const [chartType, setChartType] = useLocalStorage('chartType', 'total');\n  const [isUniform, setIsUniform] = useLocalStorage('isUniform', true);\n  const [isLog, setIsLog] = useLocalStorage('isLog', false);\n  const explorerElement = useRef();\n  const isVisible = useIsVisible(explorerElement, {once: true});\n\n  const selectedRegion = useMemo(() => {\n    if (timeseries?.[regionHighlighted.stateCode]?.districts) {\n      return {\n        stateCode: regionHighlighted.stateCode,\n        districtName: regionHighlighted.districtName,\n      };\n    } else {\n      return {\n        stateCode: regionHighlighted.stateCode,\n        districtName: null,\n      };\n    }\n  }, [timeseries, regionHighlighted.stateCode, regionHighlighted.districtName]);\n\n  const selectedTimeseries = useMemo(() => {\n    if (selectedRegion.districtName) {\n      return timeseries?.[selectedRegion.stateCode]?.districts?.[\n        selectedRegion.districtName\n      ]?.dates;\n    } else {\n      return timeseries?.[selectedRegion.stateCode]?.dates;\n    }\n  }, [timeseries, selectedRegion.stateCode, selectedRegion.districtName]);\n\n  const regions = useMemo(() => {\n    const states = Object.keys(timeseries || {})\n      .filter((code) => code !== stateCode)\n      .sort((code1, code2) =>\n        STATE_NAMES[code1].localeCompare(STATE_NAMES[code2])\n      )\n      .map((code) => {\n        return {\n          stateCode: code,\n          districtName: null,\n        };\n      });\n    const districts = Object.keys(timeseries || {}).reduce((acc1, code) => {\n      return [\n        ...acc1,\n        ...Object.keys(timeseries?.[code]?.districts || {}).reduce(\n          (acc2, districtName) => {\n            return [\n              ...acc2,\n              {\n                stateCode: code,\n                districtName: districtName,\n              },\n            ];\n          },\n          []\n        ),\n      ];\n    }, []);\n\n    return [\n      {\n        stateCode: stateCode,\n        districtName: null,\n      },\n      ...states,\n      ...districts,\n    ];\n  }, [timeseries, stateCode]);\n\n  const dropdownRegions = useMemo(() => {\n    if (\n      regions.find(\n        (region) =>\n          region.stateCode === regionHighlighted.stateCode &&\n          region.districtName === regionHighlighted.districtName\n      )\n    )\n      return regions;\n    return [\n      ...regions,\n      {\n        stateCode: regionHighlighted.stateCode,\n        districtName: regionHighlighted.districtName,\n      },\n    ];\n  }, [regionHighlighted.stateCode, regionHighlighted.districtName, regions]);\n\n  const dates = useMemo(() => {\n    const cutOffDateUpper = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(selectedTimeseries || {}).filter(\n      (date) => date <= cutOffDateUpper\n    );\n\n    const lastDate = pastDates[pastDates.length - 1];\n    if (lookback === TIMESERIES_LOOKBACKS.BEGINNING) {\n      return pastDates;\n    }\n\n    let cutOffDateLower;\n    if (lookback === TIMESERIES_LOOKBACKS.MONTH) {\n      cutOffDateLower = formatISO(sub(parseIndiaDate(lastDate), {months: 1}), {\n        representation: 'date',\n      });\n    } else if (lookback === TIMESERIES_LOOKBACKS.THREE_MONTHS) {\n      cutOffDateLower = formatISO(sub(parseIndiaDate(lastDate), {months: 3}), {\n        representation: 'date',\n      });\n    }\n    return pastDates.filter((date) => date >= cutOffDateLower);\n  }, [selectedTimeseries, timelineDate, lookback]);\n\n  const handleChange = useCallback(\n    ({target}) => {\n      setRegionHighlighted(JSON.parse(target.value));\n    },\n    [setRegionHighlighted]\n  );\n\n  const resetDropdown = useCallback(() => {\n    setRegionHighlighted({\n      stateCode: stateCode,\n      districtName: null,\n    });\n  }, [stateCode, setRegionHighlighted]);\n\n  return (\n    <div\n      className={classnames(\n        'TimeseriesExplorer fadeInUp',\n        {\n          stickied: anchor === 'timeseries',\n        },\n        {expanded: expandTable}\n      )}\n      style={{display: anchor === 'mapexplorer' ? 'none' : ''}}\n      ref={explorerElement}\n    >\n      <div className=\"timeseries-header\">\n        <div\n          className={classnames('anchor', {\n            stickied: anchor === 'timeseries',\n          })}\n          onClick={\n            setAnchor &&\n            setAnchor.bind(this, anchor === 'timeseries' ? null : 'timeseries')\n          }\n        >\n          <PinIcon />\n        </div>\n\n        <h1>{t('Spread Trends')}</h1>\n        <div className=\"tabs\">\n          {Object.entries(TIMESERIES_CHART_TYPES).map(\n            ([ctype, value], index) => (\n              <div\n                className={`tab ${chartType === ctype ? 'focused' : ''}`}\n                key={ctype}\n                onClick={setChartType.bind(this, ctype)}\n              >\n                <h4>{t(value)}</h4>\n              </div>\n            )\n          )}\n        </div>\n\n        <div className=\"scale-modes\">\n          <label className=\"main\">{t('Scale Modes')}</label>\n          <div className=\"timeseries-mode\">\n            <label htmlFor=\"timeseries-mode\">{t('Uniform')}</label>\n            <input\n              id=\"timeseries-mode\"\n              type=\"checkbox\"\n              className=\"switch\"\n              checked={isUniform}\n              aria-label={t('Checked by default to scale uniformly.')}\n              onChange={setIsUniform.bind(this, !isUniform)}\n            />\n          </div>\n          <div\n            className={`timeseries-logmode ${\n              chartType !== 'total' ? 'disabled' : ''\n            }`}\n          >\n            <label htmlFor=\"timeseries-logmode\">{t('Logarithmic')}</label>\n            <input\n              id=\"timeseries-logmode\"\n              type=\"checkbox\"\n              checked={chartType === 'total' && isLog}\n              className=\"switch\"\n              disabled={chartType !== 'total'}\n              onChange={setIsLog.bind(this, !isLog)}\n            />\n          </div>\n        </div>\n      </div>\n\n      {dropdownRegions && (\n        <div className=\"state-selection\">\n          <div className=\"dropdown\">\n            <select\n              value={JSON.stringify(selectedRegion)}\n              onChange={handleChange}\n            >\n              {dropdownRegions\n                .filter(\n                  (region) =>\n                    STATE_NAMES[region.stateCode] !== region.districtName\n                )\n                .map((region) => {\n                  return (\n                    <option\n                      value={JSON.stringify(region)}\n                      key={`${region.stateCode}-${region.districtName}`}\n                    >\n                      {region.districtName\n                        ? t(region.districtName)\n                        : t(STATE_NAMES[region.stateCode])}\n                    </option>\n                  );\n                })}\n            </select>\n          </div>\n          <div className=\"reset-icon\" onClick={resetDropdown}>\n            <ReplyIcon />\n          </div>\n        </div>\n      )}\n\n      {isVisible && (\n        <Suspense fallback={<TimeseriesLoader />}>\n          <Timeseries\n            timeseries={selectedTimeseries}\n            regionHighlighted={selectedRegion}\n            {...{dates, chartType, isUniform, isLog}}\n          />\n        </Suspense>\n      )}\n\n      {!isVisible && <div style={{height: '50rem'}} />}\n\n      <div className=\"pills\">\n        {Object.values(TIMESERIES_LOOKBACKS).map((option) => (\n          <button\n            key={option}\n            type=\"button\"\n            className={classnames({selected: lookback === option})}\n            onClick={() => setLookback(option)}\n          >\n            {t(option)}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"alert\">\n        <IssueOpenedIcon size={24} />\n        <div className=\"alert-right\">\n          {t('Tested chart is independent of uniform scaling')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.districtName,\n      prevProps.regionHighlighted.districtName\n    )\n  ) {\n    return false;\n  } else if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.anchor, prevProps.anchor)) {\n    return false;\n  } else if (!equal(currProps.expandTable, prevProps.expandTable)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(TimeseriesExplorer, isEqual);\n"]},"metadata":{},"sourceType":"module"}