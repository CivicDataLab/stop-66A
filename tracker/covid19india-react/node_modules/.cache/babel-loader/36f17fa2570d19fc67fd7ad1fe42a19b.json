{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Cell.js\";\nimport { SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS } from '../constants.js';\nimport { formatNumber, getTableStatistic } from '../utils/commonFunctions';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React from 'react';\nimport { animated, useSpring } from 'react-spring';\n\nconst Cell = ({\n  statistic,\n  data,\n  isPerMillion,\n  lastUpdatedTT\n}) => {\n  const {\n    total,\n    delta\n  } = getTableStatistic(data, statistic, isPerMillion, lastUpdatedTT);\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS\n  });\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cell statistic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, !statisticConfig.hideDelta && /*#__PURE__*/React.createElement(animated.div, {\n    className: classnames('delta', `is-${statistic}`),\n    title: delta,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, spring.delta.interpolate(delta => delta > 0 ? '\\u2191' + formatNumber(delta, statisticConfig.format) : delta < 0 ? '\\u2193' + formatNumber(Math.abs(delta), statisticConfig.format) : '')), /*#__PURE__*/React.createElement(animated.div, {\n    className: \"total\",\n    title: total,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, spring.total.interpolate(total => formatNumber(total, statisticConfig.format, statistic))));\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  var _prevProps$data, _currProps$data, _prevProps$data2, _currProps$data2;\n\n  if (!equal((_prevProps$data = prevProps.data) === null || _prevProps$data === void 0 ? void 0 : _prevProps$data.total, (_currProps$data = currProps.data) === null || _currProps$data === void 0 ? void 0 : _currProps$data.total)) {\n    return false;\n  }\n\n  if (!equal((_prevProps$data2 = prevProps.data) === null || _prevProps$data2 === void 0 ? void 0 : _prevProps$data2.delta, (_currProps$data2 = currProps.data) === null || _currProps$data2 === void 0 ? void 0 : _currProps$data2.delta)) {\n    return false;\n  }\n\n  if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default React.memo(Cell, isCellEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Cell.js"],"names":["SPRING_CONFIG_NUMBERS","STATISTIC_CONFIGS","formatNumber","getTableStatistic","classnames","equal","React","animated","useSpring","Cell","statistic","data","isPerMillion","lastUpdatedTT","total","delta","spring","config","statisticConfig","hideDelta","interpolate","format","Math","abs","isCellEqual","prevProps","currProps","memo"],"mappings":";AAAA,SAAQA,qBAAR,EAA+BC,iBAA/B,QAAuD,iBAAvD;AACA,SAAQC,YAAR,EAAsBC,iBAAtB,QAA8C,0BAA9C;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,cAAlC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA,YAAlB;AAAgCC,EAAAA;AAAhC,CAAD,KAAoD;AAC/D,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAiBZ,iBAAiB,CACtCQ,IADsC,EAEtCD,SAFsC,EAGtCE,YAHsC,EAItCC,aAJsC,CAAxC;AAOA,QAAMG,MAAM,GAAGR,SAAS,CAAC;AACvBM,IAAAA,KAAK,EAAEA,KADgB;AAEvBC,IAAAA,KAAK,EAAEA,KAFgB;AAGvBE,IAAAA,MAAM,EAAEjB;AAHe,GAAD,CAAxB;AAMA,QAAMkB,eAAe,GAAGjB,iBAAiB,CAACS,SAAD,CAAzC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACQ,eAAe,CAACC,SAAjB,iBACC,oBAAC,QAAD,CAAU,GAAV;AACE,IAAA,SAAS,EAAEf,UAAU,CAAC,OAAD,EAAW,MAAKM,SAAU,EAA1B,CADvB;AAEE,IAAA,KAAK,EAAEK,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGC,MAAM,CAACD,KAAP,CAAaK,WAAb,CAA0BL,KAAD,IACxBA,KAAK,GAAG,CAAR,GACI,WAAWb,YAAY,CAACa,KAAD,EAAQG,eAAe,CAACG,MAAxB,CAD3B,GAEIN,KAAK,GAAG,CAAR,GACA,WAAWb,YAAY,CAACoB,IAAI,CAACC,GAAL,CAASR,KAAT,CAAD,EAAkBG,eAAe,CAACG,MAAlC,CADvB,GAEA,EALL,CAJH,CAFJ,eAgBE,oBAAC,QAAD,CAAU,GAAV;AAAc,IAAA,SAAS,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAEP,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,MAAM,CAACF,KAAP,CAAaM,WAAb,CAA0BN,KAAD,IACxBZ,YAAY,CAACY,KAAD,EAAQI,eAAe,CAACG,MAAxB,EAAgCX,SAAhC,CADb,CADH,CAhBF,CADF;AAwBD,CAxCD;;AA0CA,MAAMc,WAAW,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AAAA;;AAC5C,MAAI,CAACrB,KAAK,oBAACoB,SAAS,CAACd,IAAX,oDAAC,gBAAgBG,KAAjB,qBAAwBY,SAAS,CAACf,IAAlC,oDAAwB,gBAAgBG,KAAxC,CAAV,EAA0D;AACxD,WAAO,KAAP;AACD;;AACD,MAAI,CAACT,KAAK,qBAACoB,SAAS,CAACd,IAAX,qDAAC,iBAAgBI,KAAjB,sBAAwBW,SAAS,CAACf,IAAlC,qDAAwB,iBAAgBI,KAAxC,CAAV,EAA0D;AACxD,WAAO,KAAP;AACD;;AACD,MAAI,CAACV,KAAK,CAACoB,SAAS,CAACb,YAAX,EAAyBc,SAAS,CAACd,YAAnC,CAAV,EAA4D;AAC1D,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD,CAXD;;AAaA,eAAeN,KAAK,CAACqB,IAAN,CAAWlB,IAAX,EAAiBe,WAAjB,CAAf","sourcesContent":["import {SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS} from '../constants.js';\nimport {formatNumber, getTableStatistic} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React from 'react';\nimport {animated, useSpring} from 'react-spring';\n\nconst Cell = ({statistic, data, isPerMillion, lastUpdatedTT}) => {\n  const {total, delta} = getTableStatistic(\n    data,\n    statistic,\n    isPerMillion,\n    lastUpdatedTT\n  );\n\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <div className=\"cell statistic\">\n      {!statisticConfig.hideDelta && (\n        <animated.div\n          className={classnames('delta', `is-${statistic}`)}\n          title={delta}\n        >\n          {spring.delta.interpolate((delta) =>\n            delta > 0\n              ? '\\u2191' + formatNumber(delta, statisticConfig.format)\n              : delta < 0\n              ? '\\u2193' + formatNumber(Math.abs(delta), statisticConfig.format)\n              : ''\n          )}\n        </animated.div>\n      )}\n\n      <animated.div className=\"total\" title={total}>\n        {spring.total.interpolate((total) =>\n          formatNumber(total, statisticConfig.format, statistic)\n        )}\n      </animated.div>\n    </div>\n  );\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  }\n  if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  }\n  if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Cell, isCellEqual);\n"]},"metadata":{},"sourceType":"module"}