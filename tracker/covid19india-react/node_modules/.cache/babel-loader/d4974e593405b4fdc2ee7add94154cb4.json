{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Row.js\";\nimport Cell from './Cell';\nimport DistrictRow from './DistrictRow';\nimport HeaderCell from './HeaderCell';\nimport Tooltip from './Tooltip';\nimport { STATE_NAMES, STATISTIC_CONFIGS, TABLE_STATISTICS, TABLE_STATISTICS_EXPANDED, UNKNOWN_DISTRICT_KEY } from '../constants';\nimport { capitalize, formatLastUpdated, getTableStatistic } from '../utils/commonFunctions';\nimport { AlertIcon, ClockIcon, FilterIcon, FoldUpIcon, GraphIcon, InfoIcon } from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, { useState, useCallback, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router-dom';\nimport { useSessionStorage } from 'react-use';\n\nfunction Row({\n  data,\n  stateCode,\n  districtName,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  lastUpdatedTT\n}) {\n  var _data$meta, _data$meta2;\n\n  const [showDistricts, setShowDistricts] = useState(false);\n  const [sortData, setSortData] = useSessionStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n    delta: false\n  });\n  const history = useHistory();\n  const {\n    t\n  } = useTranslation();\n  const rowElement = useRef();\n  const handleSortClick = useCallback(statistic => {\n    setSortData(produce(sortData, draftSortData => {\n      draftSortData.isAscending = !sortData.isAscending;\n      draftSortData.sortColumn = statistic;\n    }));\n  }, [sortData, setSortData]);\n  const sortingFunction = useCallback((districtNameA, districtNameB) => {\n    if (sortData.sortColumn !== 'districtName') {\n      const statisticConfig = STATISTIC_CONFIGS[sortData.sortColumn];\n      const dataType = sortData.delta && !statisticConfig.hideDelta ? 'delta' : 'total';\n      const statisticA = getTableStatistic(data.districts[districtNameA], sortData.sortColumn, isPerMillion, lastUpdatedTT)[dataType];\n      const statisticB = getTableStatistic(data.districts[districtNameB], sortData.sortColumn, isPerMillion, lastUpdatedTT)[dataType];\n      return sortData.isAscending ? statisticA - statisticB : statisticB - statisticA;\n    } else {\n      return sortData.isAscending ? districtNameA.localeCompare(districtNameB) : districtNameB.localeCompare(districtNameA);\n    }\n  }, [sortData, data, isPerMillion, lastUpdatedTT]);\n  const highlightState = useCallback(() => {\n    if (stateCode) {\n      if (regionHighlighted.stateCode !== stateCode) {\n        setRegionHighlighted(produce(regionHighlighted, draftRegionHighlighted => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = null;\n        }));\n      }\n    } else if (districtName) {\n      if (regionHighlighted.districtName !== districtName || regionHighlighted.stateCode !== data.stateCode) {\n        setRegionHighlighted(produce(regionHighlighted, draftRegionHighlighted => {\n          draftRegionHighlighted.stateCode = data.stateCode;\n          draftRegionHighlighted.districtName = districtName;\n        }));\n      }\n    }\n  }, [data.stateCode, districtName, regionHighlighted, setRegionHighlighted, stateCode]);\n\n  const _setShowDistrict = useCallback(() => {\n    if (data.districts) {\n      setShowDistricts(!showDistricts);\n    }\n  }, [showDistricts, data]);\n\n  let districtNameStr = t(districtName);\n\n  if (districtName === UNKNOWN_DISTRICT_KEY) {\n    districtNameStr = `${t(UNKNOWN_DISTRICT_KEY)} [${t(STATE_NAMES[data.stateCode])}]`;\n  }\n\n  const handleStatePageClick = useCallback(stateCode => {\n    history.push(`state/${stateCode}`);\n  }, [history]);\n  const handleCollapse = useCallback(() => {\n    setShowDistricts(false);\n    rowElement.current.scrollIntoView({\n      block: 'start'\n    }); // eslint-disable-next-line\n\n    const faux = stateCode;\n  }, [stateCode]);\n  const tableStatistics = expandTable ? TABLE_STATISTICS_EXPANDED : TABLE_STATISTICS;\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames('row', {\n      'is-total': stateCode === 'TT'\n    }, {\n      'is-highlighted': stateCode && (regionHighlighted === null || regionHighlighted === void 0 ? void 0 : regionHighlighted.stateCode) === stateCode || districtName && (regionHighlighted === null || regionHighlighted === void 0 ? void 0 : regionHighlighted.districtName) === districtName && (regionHighlighted === null || regionHighlighted === void 0 ? void 0 : regionHighlighted.stateCode) === data.stateCode\n    }),\n    onMouseEnter: highlightState,\n    onClick: _setShowDistrict,\n    ref: rowElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"state-name fadeInUp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, t(STATE_NAMES[stateCode]) || districtNameStr), (data === null || data === void 0 ? void 0 : (_data$meta = data.meta) === null || _data$meta === void 0 ? void 0 : _data$meta.notes) && /*#__PURE__*/React.createElement(Tooltip, Object.assign({\n    data: data.meta.notes\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InfoIcon, {\n    size: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  }))), tableStatistics.map(statistic => /*#__PURE__*/React.createElement(Cell, Object.assign({\n    key: statistic\n  }, {\n    data,\n    statistic,\n    isPerMillion,\n    lastUpdatedTT\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  })))), showDistricts && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"state-meta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"state-meta-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, (data === null || data === void 0 ? void 0 : (_data$meta2 = data.meta) === null || _data$meta2 === void 0 ? void 0 : _data$meta2['last_updated']) && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"last-updated\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ClockIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 19\n    }\n  }), capitalize(`${formatLastUpdated(data.meta.last_updated)} ${t('ago')}`)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"state-page\",\n    onClick: handleStatePageClick.bind(this, stateCode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(GraphIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  }, t('See more details on {{state}}', {\n    state: stateCode\n  })))), data.districts && UNKNOWN_DISTRICT_KEY in data.districts && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"state-meta-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames('disclaimer'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 19\n    }\n  }, t('District-wise data not available in state bulletin'))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames('row', 'heading'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cell heading\",\n    onClick: handleSortClick.bind(this, 'districtName'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"district-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  }, t('District')), sortData.sortColumn === 'districtName' && /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames('sort-icon', {\n      invert: !sortData.isAscending\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FilterIcon, {\n    size: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 19\n    }\n  }))), tableStatistics.map(statistic => /*#__PURE__*/React.createElement(HeaderCell, Object.assign({\n    key: statistic\n  }, {\n    statistic,\n    sortData,\n    setSortData\n  }, {\n    handleSort: handleSortClick.bind(this, statistic),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 15\n    }\n  }))))), showDistricts && Object.keys(data.districts || {}).sort((a, b) => sortingFunction(a, b)).map(districtName => /*#__PURE__*/React.createElement(DistrictRow, Object.assign({\n    data: data.districts[districtName],\n    key: districtName\n  }, {\n    districtName,\n    regionHighlighted,\n    setRegionHighlighted,\n    stateCode,\n    isPerMillion,\n    expandTable,\n    lastUpdatedTT\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }))), showDistricts && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, `End of ${t(STATE_NAMES[stateCode])}'s districts`), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fold\",\n    onClick: handleCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FoldUpIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 15\n    }\n  })))));\n}\n\nconst isEqual = (prevProps, currProps) => {\n  var _prevProps$data, _currProps$data, _prevProps$data2, _currProps$data2;\n\n  if (!equal((_prevProps$data = prevProps.data) === null || _prevProps$data === void 0 ? void 0 : _prevProps$data.total, (_currProps$data = currProps.data) === null || _currProps$data === void 0 ? void 0 : _currProps$data.total)) {\n    return false;\n  } else if (!equal((_prevProps$data2 = prevProps.data) === null || _prevProps$data2 === void 0 ? void 0 : _prevProps$data2.delta, (_currProps$data2 = currProps.data) === null || _currProps$data2 === void 0 ? void 0 : _currProps$data2.delta)) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (!equal(prevProps.regionHighlighted.stateCode, currProps.regionHighlighted.stateCode) && equal(prevProps.regionHighlighted.stateCode, prevProps.stateCode) || equal(currProps.regionHighlighted.stateCode, currProps.stateCode)) {\n    return false;\n  } else if (!equal(prevProps.regionHighlighted.districtName, currProps.regionHighlighted.districtName) && equal(prevProps.regionHighlighted.districtName, prevProps.districtName) || equal(currProps.regionHighlighted.districtName, currProps.districtName)) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else return true;\n};\n\nexport default React.memo(Row, isEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Row.js"],"names":["Cell","DistrictRow","HeaderCell","Tooltip","STATE_NAMES","STATISTIC_CONFIGS","TABLE_STATISTICS","TABLE_STATISTICS_EXPANDED","UNKNOWN_DISTRICT_KEY","capitalize","formatLastUpdated","getTableStatistic","AlertIcon","ClockIcon","FilterIcon","FoldUpIcon","GraphIcon","InfoIcon","classnames","equal","produce","React","useState","useCallback","useRef","useTranslation","useHistory","useSessionStorage","Row","data","stateCode","districtName","isPerMillion","regionHighlighted","setRegionHighlighted","expandTable","lastUpdatedTT","showDistricts","setShowDistricts","sortData","setSortData","sortColumn","isAscending","delta","history","t","rowElement","handleSortClick","statistic","draftSortData","sortingFunction","districtNameA","districtNameB","statisticConfig","dataType","hideDelta","statisticA","districts","statisticB","localeCompare","highlightState","draftRegionHighlighted","_setShowDistrict","districtNameStr","handleStatePageClick","push","handleCollapse","current","scrollIntoView","block","faux","tableStatistics","meta","notes","map","last_updated","bind","state","invert","Object","keys","sort","a","b","isEqual","prevProps","currProps","total","memo"],"mappings":"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","sourcesContent":["import Cell from './Cell';\nimport DistrictRow from './DistrictRow';\nimport HeaderCell from './HeaderCell';\nimport Tooltip from './Tooltip';\n\nimport {\n  STATE_NAMES,\n  STATISTIC_CONFIGS,\n  TABLE_STATISTICS,\n  TABLE_STATISTICS_EXPANDED,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {\n  capitalize,\n  formatLastUpdated,\n  getTableStatistic,\n} from '../utils/commonFunctions';\n\nimport {\n  AlertIcon,\n  ClockIcon,\n  FilterIcon,\n  FoldUpIcon,\n  GraphIcon,\n  InfoIcon,\n} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useState, useCallback, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\n\nfunction Row({\n  data,\n  stateCode,\n  districtName,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  lastUpdatedTT,\n}) {\n  const [showDistricts, setShowDistricts] = useState(false);\n  const [sortData, setSortData] = useSessionStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n    delta: false,\n  });\n\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  const rowElement = useRef();\n\n  const handleSortClick = useCallback(\n    (statistic) => {\n      setSortData(\n        produce(sortData, (draftSortData) => {\n          draftSortData.isAscending = !sortData.isAscending;\n          draftSortData.sortColumn = statistic;\n        })\n      );\n    },\n    [sortData, setSortData]\n  );\n\n  const sortingFunction = useCallback(\n    (districtNameA, districtNameB) => {\n      if (sortData.sortColumn !== 'districtName') {\n        const statisticConfig = STATISTIC_CONFIGS[sortData.sortColumn];\n        const dataType =\n          sortData.delta && !statisticConfig.hideDelta ? 'delta' : 'total';\n\n        const statisticA = getTableStatistic(\n          data.districts[districtNameA],\n          sortData.sortColumn,\n          isPerMillion,\n          lastUpdatedTT\n        )[dataType];\n        const statisticB = getTableStatistic(\n          data.districts[districtNameB],\n          sortData.sortColumn,\n          isPerMillion,\n          lastUpdatedTT\n        )[dataType];\n        return sortData.isAscending\n          ? statisticA - statisticB\n          : statisticB - statisticA;\n      } else {\n        return sortData.isAscending\n          ? districtNameA.localeCompare(districtNameB)\n          : districtNameB.localeCompare(districtNameA);\n      }\n    },\n    [sortData, data, isPerMillion, lastUpdatedTT]\n  );\n\n  const highlightState = useCallback(() => {\n    if (stateCode) {\n      if (regionHighlighted.stateCode !== stateCode) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = stateCode;\n            draftRegionHighlighted.districtName = null;\n          })\n        );\n      }\n    } else if (districtName) {\n      if (\n        regionHighlighted.districtName !== districtName ||\n        regionHighlighted.stateCode !== data.stateCode\n      ) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = data.stateCode;\n            draftRegionHighlighted.districtName = districtName;\n          })\n        );\n      }\n    }\n  }, [\n    data.stateCode,\n    districtName,\n    regionHighlighted,\n    setRegionHighlighted,\n    stateCode,\n  ]);\n\n  const _setShowDistrict = useCallback(() => {\n    if (data.districts) {\n      setShowDistricts(!showDistricts);\n    }\n  }, [showDistricts, data]);\n\n  let districtNameStr = t(districtName);\n  if (districtName === UNKNOWN_DISTRICT_KEY) {\n    districtNameStr = `${t(UNKNOWN_DISTRICT_KEY)} [${t(\n      STATE_NAMES[data.stateCode]\n    )}]`;\n  }\n\n  const handleStatePageClick = useCallback(\n    (stateCode) => {\n      history.push(`state/${stateCode}`);\n    },\n    [history]\n  );\n\n  const handleCollapse = useCallback(() => {\n    setShowDistricts(false);\n    rowElement.current.scrollIntoView({\n      block: 'start',\n    });\n\n    // eslint-disable-next-line\n    const faux = stateCode;\n  }, [stateCode]);\n\n  const tableStatistics = expandTable\n    ? TABLE_STATISTICS_EXPANDED\n    : TABLE_STATISTICS;\n\n  return (\n    <React.Fragment>\n      <div\n        className={classnames(\n          'row',\n          {'is-total': stateCode === 'TT'},\n          {\n            'is-highlighted':\n              (stateCode && regionHighlighted?.stateCode === stateCode) ||\n              (districtName &&\n                regionHighlighted?.districtName === districtName &&\n                regionHighlighted?.stateCode === data.stateCode),\n          }\n        )}\n        onMouseEnter={highlightState}\n        onClick={_setShowDistrict}\n        ref={rowElement}\n      >\n        <div className=\"cell\">\n          <div className=\"state-name fadeInUp\">\n            {t(STATE_NAMES[stateCode]) || districtNameStr}\n          </div>\n          {data?.meta?.notes && (\n            <Tooltip {...{data: data.meta.notes}}>\n              <InfoIcon size={16} />\n            </Tooltip>\n          )}\n        </div>\n\n        {tableStatistics.map((statistic) => (\n          <Cell\n            key={statistic}\n            {...{data, statistic, isPerMillion, lastUpdatedTT}}\n          />\n        ))}\n      </div>\n\n      {showDistricts && (\n        <React.Fragment>\n          <div className=\"state-meta\">\n            <div className=\"state-meta-top\">\n              {data?.meta?.['last_updated'] && (\n                <p className=\"last-updated\">\n                  <ClockIcon />\n                  {capitalize(\n                    `${formatLastUpdated(data.meta.last_updated)} ${t('ago')}`\n                  )}\n                </p>\n              )}\n              <div\n                className=\"state-page\"\n                onClick={handleStatePageClick.bind(this, stateCode)}\n              >\n                <GraphIcon />\n                <span>\n                  {t('See more details on {{state}}', {\n                    state: stateCode,\n                  })}\n                </span>\n              </div>\n            </div>\n\n            {data.districts && UNKNOWN_DISTRICT_KEY in data.districts && (\n              <div className=\"state-meta-bottom\">\n                <div className={classnames('disclaimer')}>\n                  <AlertIcon />\n                  <span>\n                    {t('District-wise data not available in state bulletin')}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className={classnames('row', 'heading')}>\n            <div\n              className=\"cell heading\"\n              onClick={handleSortClick.bind(this, 'districtName')}\n            >\n              <div className=\"district-name\">{t('District')}</div>\n              {sortData.sortColumn === 'districtName' && (\n                <div\n                  className={classnames('sort-icon', {\n                    invert: !sortData.isAscending,\n                  })}\n                >\n                  <FilterIcon size={10} />\n                </div>\n              )}\n            </div>\n\n            {tableStatistics.map((statistic) => (\n              <HeaderCell\n                key={statistic}\n                {...{statistic, sortData, setSortData}}\n                handleSort={handleSortClick.bind(this, statistic)}\n              />\n            ))}\n          </div>\n        </React.Fragment>\n      )}\n\n      {showDistricts &&\n        Object.keys(data.districts || {})\n          .sort((a, b) => sortingFunction(a, b))\n          .map((districtName) => (\n            <DistrictRow\n              data={data.districts[districtName]}\n              key={districtName}\n              {...{\n                districtName,\n                regionHighlighted,\n                setRegionHighlighted,\n                stateCode,\n                isPerMillion,\n                expandTable,\n                lastUpdatedTT,\n              }}\n            />\n          ))}\n\n      {showDistricts && (\n        <div className=\"spacer-row\">\n          <div className=\"spacer\">\n            <p>{`End of ${t(STATE_NAMES[stateCode])}'s districts`}</p>\n            <div className=\"fold\" onClick={handleCollapse}>\n              <FoldUpIcon />\n            </div>\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.stateCode,\n      currProps.regionHighlighted.stateCode\n    ) &&\n      equal(prevProps.regionHighlighted.stateCode, prevProps.stateCode)) ||\n    equal(currProps.regionHighlighted.stateCode, currProps.stateCode)\n  ) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n      equal(\n        prevProps.regionHighlighted.districtName,\n        prevProps.districtName\n      )) ||\n    equal(currProps.regionHighlighted.districtName, currProps.districtName)\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else return true;\n};\n\nexport default React.memo(Row, isEqual);\n"]},"metadata":{},"sourceType":"module"}