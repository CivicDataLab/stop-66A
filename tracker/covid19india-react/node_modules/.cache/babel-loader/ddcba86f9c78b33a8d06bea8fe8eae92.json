{"ast":null,"code":"import StateMetaCard from'./StateMetaCard';import{STATE_NAMES}from'../constants';import{formatDate,formatNumber,formatLastUpdated,getStatistic,getIndiaYesterdayISO,parseIndiaDate}from'../utils/commonFunctions';import{differenceInDays}from'date-fns';import React from'react';import{Compass}from'react-feather';function StateMeta(_ref){var _data$stateCode,_data$stateCode$meta,_data$stateCode2,_data$stateCode2$meta,_data$stateCode2$meta2;var stateCode=_ref.stateCode,data=_ref.data,timeseries=_ref.timeseries;var pastDates=Object.keys(timeseries||{}).filter(function(date){return date<=getIndiaYesterdayISO();});var lastDate=pastDates[pastDates.length-1];var lastConfirmed=getStatistic(timeseries===null||timeseries===void 0?void 0:timeseries[lastDate],'total','confirmed');var prevWeekDate=pastDates.reverse().find(function(date){return differenceInDays(parseIndiaDate(lastDate),parseIndiaDate(date))>=7;});var prevWeekConfirmed=getStatistic(timeseries===null||timeseries===void 0?void 0:timeseries[prevWeekDate],'total','confirmed');var diffDays=differenceInDays(parseIndiaDate(lastDate),parseIndiaDate(prevWeekDate));var confirmedPerMillion=getStatistic(data[stateCode],'total','confirmed',true);var testPerMillion=getStatistic(data[stateCode],'total','tested',true);var totalConfirmedPerMillion=getStatistic(data['TT'],'total','confirmed',true);var activePercent=getStatistic(data[stateCode],'total','activeRatio');var recoveryPercent=getStatistic(data[stateCode],'total','recoveryRatio');var deathPercent=getStatistic(data[stateCode],'total','cfr');var growthRate=(lastConfirmed-prevWeekConfirmed)/prevWeekConfirmed*100/diffDays;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"StateMeta population\"},/*#__PURE__*/React.createElement(\"div\",{className:\"meta-item population\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Population\"),/*#__PURE__*/React.createElement(\"h1\",null,formatNumber((_data$stateCode=data[stateCode])===null||_data$stateCode===void 0?void 0:(_data$stateCode$meta=_data$stateCode.meta)===null||_data$stateCode$meta===void 0?void 0:_data$stateCode$meta.population))),/*#__PURE__*/React.createElement(\"div\",{className:\"alert\"},/*#__PURE__*/React.createElement(Compass,null),/*#__PURE__*/React.createElement(\"div\",{className:\"alert-right\"},\"Based on 2019 population projection by NCP\",' ',/*#__PURE__*/React.createElement(\"a\",{href:\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\",target:\"_noblank\"},\"report\")))),/*#__PURE__*/React.createElement(\"div\",{className:\"StateMeta\"},/*#__PURE__*/React.createElement(StateMetaCard,{className:\"confirmed\",title:'Confirmed Per Million',statistic:formatNumber(confirmedPerMillion),total:formatNumber(totalConfirmedPerMillion),formula:'(confirmed / state population) * 1 Million',description:\"\\n            ~\".concat(formatNumber(Math.round(confirmedPerMillion)),\" out of every 10 lakh people in \").concat(STATE_NAMES[stateCode],\" have tested positive for the virus.\\n            \")}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"active\",title:'Active Ratio',statistic:\"\".concat(formatNumber(activePercent,'%')),formula:'(active / confirmed) * 100',description:activePercent>0?\"For every 100 confirmed cases, ~\".concat(formatNumber(Math.round(activePercent)),\" are currently infected.\"):'Currently, there are no active cases in this state.'}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"recovery\",title:'Recovery Ratio',statistic:\"\".concat(formatNumber(recoveryPercent,'%')),formula:'(recovered / confirmed) * 100',description:recoveryPercent>0?\"For every 100 confirmed cases, ~\".concat(formatNumber(Math.round(recoveryPercent)),\" have recovered from the virus.\"):'Unfortunately, there are no recoveries in this state yet.'}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"mortality\",title:'Case Fatality Ratio',statistic:\"\".concat(formatNumber(deathPercent,'%')),formula:'(deceased / confirmed) * 100',description:deathPercent>0?\"For every 100 confirmed cases, ~\".concat(formatNumber(Math.round(deathPercent)),\" have unfortunately passed away from the virus.\"):'Fortunately, no one has passed away from the virus in this state.'}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"gr\",title:'Avg. Growth Rate',statistic:growthRate>0?\"\".concat(formatNumber(growthRate,'%')):'-',formula:'(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7',date:\"\".concat(formatDate(prevWeekDate,'dd MMM'),\" - \").concat(formatDate(lastDate,'dd MMM')),description:growthRate>0?\"In the last one week, the number of new infections has\\n              grown by an average of \".concat(formatNumber(growthRate,'%'),\"\\n              every day.\"):'There has been no growth in the number of infections in last one week.'}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"tpm\",title:'Tests Per Million',statistic:\"\".concat(formatNumber(testPerMillion)),formula:'(total tests in state / total population of state) * 1 Million',date:testPerMillion?\"As of \".concat(formatLastUpdated((_data$stateCode2=data[stateCode])===null||_data$stateCode2===void 0?void 0:(_data$stateCode2$meta=_data$stateCode2.meta)===null||_data$stateCode2$meta===void 0?void 0:(_data$stateCode2$meta2=_data$stateCode2$meta.tested)===null||_data$stateCode2$meta2===void 0?void 0:_data$stateCode2$meta2['last_updated']),\" ago\"):'',description:testPerMillion>0?\"For every 10 lakh people in \".concat(STATE_NAMES[stateCode],\",\\n                ~\").concat(formatNumber(Math.round(testPerMillion)),\" samples were tested.\"):'No tests have been conducted in this state yet.'})));}var isEqual=function isEqual(prevProps,currProps){if(currProps.timeseries&&!prevProps.timeseries){return false;}else if(prevProps.stateCode!==currProps.stateCode){return false;}return true;};export default React.memo(StateMeta,isEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/StateMeta.js"],"names":["StateMetaCard","STATE_NAMES","formatDate","formatNumber","formatLastUpdated","getStatistic","getIndiaYesterdayISO","parseIndiaDate","differenceInDays","React","Compass","StateMeta","stateCode","data","timeseries","pastDates","Object","keys","filter","date","lastDate","length","lastConfirmed","prevWeekDate","reverse","find","prevWeekConfirmed","diffDays","confirmedPerMillion","testPerMillion","totalConfirmedPerMillion","activePercent","recoveryPercent","deathPercent","growthRate","meta","population","Math","round","tested","isEqual","prevProps","currProps","memo"],"mappings":"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","sourcesContent":["import StateMetaCard from './StateMetaCard';\n\nimport {STATE_NAMES} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport {differenceInDays} from 'date-fns';\nimport React from 'react';\nimport {Compass} from 'react-feather';\n\nfunction StateMeta({stateCode, data, timeseries}) {\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaYesterdayISO()\n  );\n  const lastDate = pastDates[pastDates.length - 1];\n  const lastConfirmed = getStatistic(\n    timeseries?.[lastDate],\n    'total',\n    'confirmed'\n  );\n  const prevWeekDate = pastDates\n    .reverse()\n    .find(\n      (date) =>\n        differenceInDays(parseIndiaDate(lastDate), parseIndiaDate(date)) >= 7\n    );\n  const prevWeekConfirmed = getStatistic(\n    timeseries?.[prevWeekDate],\n    'total',\n    'confirmed'\n  );\n  const diffDays = differenceInDays(\n    parseIndiaDate(lastDate),\n    parseIndiaDate(prevWeekDate)\n  );\n\n  const confirmedPerMillion = getStatistic(\n    data[stateCode],\n    'total',\n    'confirmed',\n    true\n  );\n  const testPerMillion = getStatistic(data[stateCode], 'total', 'tested', true);\n  const totalConfirmedPerMillion = getStatistic(\n    data['TT'],\n    'total',\n    'confirmed',\n    true\n  );\n\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(\n    data[stateCode],\n    'total',\n    'recoveryRatio'\n  );\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\n\n  const growthRate =\n    (((lastConfirmed - prevWeekConfirmed) / prevWeekConfirmed) * 100) /\n    diffDays;\n\n  return (\n    <React.Fragment>\n      <div className=\"StateMeta population\">\n        <div className=\"meta-item population\">\n          <h3>Population</h3>\n          <h1>{formatNumber(data[stateCode]?.meta?.population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Compass />\n          <div className=\"alert-right\">\n            Based on 2019 population projection by NCP{' '}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Million'}\n          statistic={formatNumber(confirmedPerMillion)}\n          total={formatNumber(totalConfirmedPerMillion)}\n          formula={'(confirmed / state population) * 1 Million'}\n          description={`\n            ~${formatNumber(\n              Math.round(confirmedPerMillion)\n            )} out of every 10 lakh people in ${\n            STATE_NAMES[stateCode]\n          } have tested positive for the virus.\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active Ratio'}\n          statistic={`${formatNumber(activePercent, '%')}`}\n          formula={'(active / confirmed) * 100'}\n          description={\n            activePercent > 0\n              ? `For every 100 confirmed cases, ~${formatNumber(\n                  Math.round(activePercent)\n                )} are currently infected.`\n              : 'Currently, there are no active cases in this state.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Ratio'}\n          statistic={`${formatNumber(recoveryPercent, '%')}`}\n          formula={'(recovered / confirmed) * 100'}\n          description={\n            recoveryPercent > 0\n              ? `For every 100 confirmed cases, ~${formatNumber(\n                  Math.round(recoveryPercent)\n                )} have recovered from the virus.`\n              : 'Unfortunately, there are no recoveries in this state yet.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Case Fatality Ratio'}\n          statistic={`${formatNumber(deathPercent, '%')}`}\n          formula={'(deceased / confirmed) * 100'}\n          description={\n            deathPercent > 0\n              ? `For every 100 confirmed cases, ~${formatNumber(\n                  Math.round(deathPercent)\n                )} have unfortunately passed away from the virus.`\n              : 'Fortunately, no one has passed away from the virus in this state.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"gr\"\n          title={'Avg. Growth Rate'}\n          statistic={growthRate > 0 ? `${formatNumber(growthRate, '%')}` : '-'}\n          formula={\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\n          }\n          date={`${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(\n            lastDate,\n            'dd MMM'\n          )}`}\n          description={\n            growthRate > 0\n              ? `In the last one week, the number of new infections has\n              grown by an average of ${formatNumber(growthRate, '%')}\n              every day.`\n              : 'There has been no growth in the number of infections in last one week.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Million'}\n          statistic={`${formatNumber(testPerMillion)}`}\n          formula={\n            '(total tests in state / total population of state) * 1 Million'\n          }\n          date={\n            testPerMillion\n              ? `As of ${formatLastUpdated(\n                  data[stateCode]?.meta?.tested?.['last_updated']\n                )} ago`\n              : ''\n          }\n          description={\n            testPerMillion > 0\n              ? `For every 10 lakh people in ${STATE_NAMES[stateCode]},\n                ~${formatNumber(\n                  Math.round(testPerMillion)\n                )} samples were tested.`\n              : 'No tests have been conducted in this state yet.'\n          }\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(StateMeta, isEqual);\n"]},"metadata":{},"sourceType":"module"}