{"ast":null,"code":"import{SPRING_CONFIG_NUMBERS,STATISTIC_CONFIGS}from'../constants.js';import{formatNumber,getTableStatistic}from'../utils/commonFunctions';import classnames from'classnames';import equal from'fast-deep-equal';import React from'react';import{animated,useSpring}from'react-spring';var Cell=function Cell(_ref){var statistic=_ref.statistic,data=_ref.data,isPerMillion=_ref.isPerMillion,lastUpdatedTT=_ref.lastUpdatedTT;var _getTableStatistic=getTableStatistic(data,statistic,isPerMillion,lastUpdatedTT),total=_getTableStatistic.total,delta=_getTableStatistic.delta;var spring=useSpring({total:total,delta:delta,config:SPRING_CONFIG_NUMBERS});var statisticConfig=STATISTIC_CONFIGS[statistic];return/*#__PURE__*/React.createElement(\"div\",{className:\"cell statistic\"},!statisticConfig.hideDelta&&/*#__PURE__*/React.createElement(animated.div,{className:classnames('delta',\"is-\".concat(statistic)),title:delta},spring.delta.interpolate(function(delta){return delta>0?\"\\u2191\"+formatNumber(delta,statisticConfig.format):delta<0?\"\\u2193\"+formatNumber(Math.abs(delta),statisticConfig.format):'';})),/*#__PURE__*/React.createElement(animated.div,{className:\"total\",title:total},spring.total.interpolate(function(total){return formatNumber(total,statisticConfig.format,statistic);})));};var isCellEqual=function isCellEqual(prevProps,currProps){var _prevProps$data,_currProps$data,_prevProps$data2,_currProps$data2;if(!equal((_prevProps$data=prevProps.data)===null||_prevProps$data===void 0?void 0:_prevProps$data.total,(_currProps$data=currProps.data)===null||_currProps$data===void 0?void 0:_currProps$data.total)){return false;}if(!equal((_prevProps$data2=prevProps.data)===null||_prevProps$data2===void 0?void 0:_prevProps$data2.delta,(_currProps$data2=currProps.data)===null||_currProps$data2===void 0?void 0:_currProps$data2.delta)){return false;}if(!equal(prevProps.isPerMillion,currProps.isPerMillion)){return false;}return true;};export default React.memo(Cell,isCellEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Cell.js"],"names":["SPRING_CONFIG_NUMBERS","STATISTIC_CONFIGS","formatNumber","getTableStatistic","classnames","equal","React","animated","useSpring","Cell","statistic","data","isPerMillion","lastUpdatedTT","total","delta","spring","config","statisticConfig","hideDelta","interpolate","format","Math","abs","isCellEqual","prevProps","currProps","memo"],"mappings":"AAAA,OAAQA,qBAAR,CAA+BC,iBAA/B,KAAuD,iBAAvD,CACA,OAAQC,YAAR,CAAsBC,iBAAtB,KAA8C,0BAA9C,CAEA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,QAAR,CAAkBC,SAAlB,KAAkC,cAAlC,CAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAAoD,IAAlDC,CAAAA,SAAkD,MAAlDA,SAAkD,CAAvCC,IAAuC,MAAvCA,IAAuC,CAAjCC,YAAiC,MAAjCA,YAAiC,CAAnBC,aAAmB,MAAnBA,aAAmB,wBACxCV,iBAAiB,CACtCQ,IADsC,CAEtCD,SAFsC,CAGtCE,YAHsC,CAItCC,aAJsC,CADuB,CACxDC,KADwD,oBACxDA,KADwD,CACjDC,KADiD,oBACjDA,KADiD,CAQ/D,GAAMC,CAAAA,MAAM,CAAGR,SAAS,CAAC,CACvBM,KAAK,CAAEA,KADgB,CAEvBC,KAAK,CAAEA,KAFgB,CAGvBE,MAAM,CAAEjB,qBAHe,CAAD,CAAxB,CAMA,GAAMkB,CAAAA,eAAe,CAAGjB,iBAAiB,CAACS,SAAD,CAAzC,CAEA,mBACE,2BAAK,SAAS,CAAC,gBAAf,EACG,CAACQ,eAAe,CAACC,SAAjB,eACC,oBAAC,QAAD,CAAU,GAAV,EACE,SAAS,CAAEf,UAAU,CAAC,OAAD,cAAgBM,SAAhB,EADvB,CAEE,KAAK,CAAEK,KAFT,EAIGC,MAAM,CAACD,KAAP,CAAaK,WAAb,CAAyB,SAACL,KAAD,QACxBA,CAAAA,KAAK,CAAG,CAAR,CACI,SAAWb,YAAY,CAACa,KAAD,CAAQG,eAAe,CAACG,MAAxB,CAD3B,CAEIN,KAAK,CAAG,CAAR,CACA,SAAWb,YAAY,CAACoB,IAAI,CAACC,GAAL,CAASR,KAAT,CAAD,CAAkBG,eAAe,CAACG,MAAlC,CADvB,CAEA,EALoB,EAAzB,CAJH,CAFJ,cAgBE,oBAAC,QAAD,CAAU,GAAV,EAAc,SAAS,CAAC,OAAxB,CAAgC,KAAK,CAAEP,KAAvC,EACGE,MAAM,CAACF,KAAP,CAAaM,WAAb,CAAyB,SAACN,KAAD,QACxBZ,CAAAA,YAAY,CAACY,KAAD,CAAQI,eAAe,CAACG,MAAxB,CAAgCX,SAAhC,CADY,EAAzB,CADH,CAhBF,CADF,CAwBD,CAxCD,CA0CA,GAAMc,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,SAAD,CAAYC,SAAZ,CAA0B,uEAC5C,GAAI,CAACrB,KAAK,kBAACoB,SAAS,CAACd,IAAX,0CAAC,gBAAgBG,KAAjB,kBAAwBY,SAAS,CAACf,IAAlC,0CAAwB,gBAAgBG,KAAxC,CAAV,CAA0D,CACxD,MAAO,MAAP,CACD,CACD,GAAI,CAACT,KAAK,mBAACoB,SAAS,CAACd,IAAX,2CAAC,iBAAgBI,KAAjB,mBAAwBW,SAAS,CAACf,IAAlC,2CAAwB,iBAAgBI,KAAxC,CAAV,CAA0D,CACxD,MAAO,MAAP,CACD,CACD,GAAI,CAACV,KAAK,CAACoB,SAAS,CAACb,YAAX,CAAyBc,SAAS,CAACd,YAAnC,CAAV,CAA4D,CAC1D,MAAO,MAAP,CACD,CACD,MAAO,KAAP,CACD,CAXD,CAaA,cAAeN,CAAAA,KAAK,CAACqB,IAAN,CAAWlB,IAAX,CAAiBe,WAAjB,CAAf","sourcesContent":["import {SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS} from '../constants.js';\nimport {formatNumber, getTableStatistic} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React from 'react';\nimport {animated, useSpring} from 'react-spring';\n\nconst Cell = ({statistic, data, isPerMillion, lastUpdatedTT}) => {\n  const {total, delta} = getTableStatistic(\n    data,\n    statistic,\n    isPerMillion,\n    lastUpdatedTT\n  );\n\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <div className=\"cell statistic\">\n      {!statisticConfig.hideDelta && (\n        <animated.div\n          className={classnames('delta', `is-${statistic}`)}\n          title={delta}\n        >\n          {spring.delta.interpolate((delta) =>\n            delta > 0\n              ? '\\u2191' + formatNumber(delta, statisticConfig.format)\n              : delta < 0\n              ? '\\u2193' + formatNumber(Math.abs(delta), statisticConfig.format)\n              : ''\n          )}\n        </animated.div>\n      )}\n\n      <animated.div className=\"total\" title={total}>\n        {spring.total.interpolate((total) =>\n          formatNumber(total, statisticConfig.format, statistic)\n        )}\n      </animated.div>\n    </div>\n  );\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  }\n  if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  }\n  if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Cell, isCellEqual);\n"]},"metadata":{},"sourceType":"module"}