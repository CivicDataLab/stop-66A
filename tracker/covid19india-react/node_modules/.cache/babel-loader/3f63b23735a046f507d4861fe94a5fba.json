{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/DistrictRow.js\";\nimport Cell from './Cell';\nimport Tooltip from './Tooltip';\nimport { TABLE_STATISTICS, TABLE_STATISTICS_EXPANDED } from '../constants';\nimport { InfoIcon } from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nfunction DistrictRow({\n  stateCode,\n  districtName,\n  data,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  lastUpdatedTT\n}) {\n  var _data$meta;\n\n  const {\n    t\n  } = useTranslation();\n  const highlightDistrict = useCallback(() => {\n    if (regionHighlighted.districtName !== districtName) {\n      setRegionHighlighted(produce(regionHighlighted, draftRegionHighlighted => {\n        draftRegionHighlighted.stateCode = stateCode;\n        draftRegionHighlighted.districtName = districtName;\n      }));\n    }\n  }, [regionHighlighted, districtName, setRegionHighlighted, stateCode]);\n  const tableStatistics = expandTable ? TABLE_STATISTICS_EXPANDED : TABLE_STATISTICS;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames('row', 'district', {\n      'is-highlighted': (regionHighlighted === null || regionHighlighted === void 0 ? void 0 : regionHighlighted.districtName) === districtName\n    }),\n    onMouseEnter: highlightDistrict,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"state-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, t(districtName)), (data === null || data === void 0 ? void 0 : (_data$meta = data.meta) === null || _data$meta === void 0 ? void 0 : _data$meta.notes) && /*#__PURE__*/React.createElement(Tooltip, Object.assign({\n    data: data.meta.notes\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(InfoIcon, {\n    size: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }))), tableStatistics.map(statistic => /*#__PURE__*/React.createElement(Cell, Object.assign({\n    key: statistic\n  }, {\n    statistic,\n    data,\n    isPerMillion,\n    lastUpdatedTT\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }))));\n}\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  var _prevProps$data, _currProps$data, _prevProps$data2, _currProps$data2, _prevProps$data3, _currProps$data3;\n\n  if (!equal((_prevProps$data = prevProps.data) === null || _prevProps$data === void 0 ? void 0 : _prevProps$data.total, (_currProps$data = currProps.data) === null || _currProps$data === void 0 ? void 0 : _currProps$data.total)) {\n    return false;\n  } else if (!equal((_prevProps$data2 = prevProps.data) === null || _prevProps$data2 === void 0 ? void 0 : _prevProps$data2.delta, (_currProps$data2 = currProps.data) === null || _currProps$data2 === void 0 ? void 0 : _currProps$data2.delta)) {\n    return false;\n  } else if (!equal((_prevProps$data3 = prevProps.data) === null || _prevProps$data3 === void 0 ? void 0 : _prevProps$data3['last_updated'], (_currProps$data3 = currProps.data) === null || _currProps$data3 === void 0 ? void 0 : _currProps$data3['last_updated'])) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (!equal(prevProps.regionHighlighted.districtName, currProps.regionHighlighted.districtName) && (equal(prevProps.regionHighlighted.districtName, prevProps.districtName) || equal(currProps.regionHighlighted.districtName, currProps.districtName))) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default React.memo(DistrictRow, isDistrictRowEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/DistrictRow.js"],"names":["Cell","Tooltip","TABLE_STATISTICS","TABLE_STATISTICS_EXPANDED","InfoIcon","classnames","equal","produce","React","useCallback","useTranslation","DistrictRow","stateCode","districtName","data","isPerMillion","regionHighlighted","setRegionHighlighted","expandTable","lastUpdatedTT","t","highlightDistrict","draftRegionHighlighted","tableStatistics","meta","notes","map","statistic","isDistrictRowEqual","prevProps","currProps","total","delta","memo"],"mappings":"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","sourcesContent":["import Cell from './Cell';\nimport Tooltip from './Tooltip';\n\nimport {TABLE_STATISTICS, TABLE_STATISTICS_EXPANDED} from '../constants';\n\nimport {InfoIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction DistrictRow({\n  stateCode,\n  districtName,\n  data,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  lastUpdatedTT,\n}) {\n  const {t} = useTranslation();\n\n  const highlightDistrict = useCallback(() => {\n    if (regionHighlighted.districtName !== districtName) {\n      setRegionHighlighted(\n        produce(regionHighlighted, (draftRegionHighlighted) => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = districtName;\n        })\n      );\n    }\n  }, [regionHighlighted, districtName, setRegionHighlighted, stateCode]);\n\n  const tableStatistics = expandTable\n    ? TABLE_STATISTICS_EXPANDED\n    : TABLE_STATISTICS;\n\n  return (\n    <div\n      className={classnames('row', 'district', {\n        'is-highlighted': regionHighlighted?.districtName === districtName,\n      })}\n      onMouseEnter={highlightDistrict}\n    >\n      <div className=\"cell\">\n        <div className=\"state-name\">{t(districtName)}</div>\n        {data?.meta?.notes && (\n          <Tooltip {...{data: data.meta.notes}}>\n            <InfoIcon size={16} />\n          </Tooltip>\n        )}\n      </div>\n\n      {tableStatistics.map((statistic) => (\n        <Cell\n          key={statistic}\n          {...{statistic, data, isPerMillion, lastUpdatedTT}}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.['last_updated'], currProps.data?.['last_updated'])\n  ) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n    (equal(prevProps.regionHighlighted.districtName, prevProps.districtName) ||\n      equal(currProps.regionHighlighted.districtName, currProps.districtName))\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(DistrictRow, isDistrictRowEqual);\n"]},"metadata":{},"sourceType":"module"}