{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Level.js\";\nimport { PRIMARY_STATISTICS, STATISTIC_CONFIGS, SPRING_CONFIG_NUMBERS } from '../constants';\nimport { capitalize, formatNumber, getStatistic } from '../utils/commonFunctions';\nimport { HeartFillIcon } from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React, { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { animated, useSpring } from 'react-spring';\n\nfunction PureLevelItem({\n  statistic,\n  total,\n  delta\n}) {\n  const {\n    t\n  } = useTranslation();\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS\n  });\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, t(capitalize(statisticConfig.displayName))), /*#__PURE__*/React.createElement(animated.h4, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, statistic !== 'active' ? delta > 0 ? spring.delta.interpolate(delta => `+${formatNumber(delta, statisticConfig.format, statistic)}`) : /*#__PURE__*/React.createElement(HeartFillIcon, {\n    size: 9,\n    verticalAlign: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }) : '\\u00A0'), /*#__PURE__*/React.createElement(animated.h1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, spring.total.interpolate(total => formatNumber(total, statisticConfig.format, statistic))));\n}\n\nconst LevelItem = React.memo(PureLevelItem);\n\nfunction Level({\n  data\n}) {\n  const trail = useMemo(() => {\n    const styles = [];\n    PRIMARY_STATISTICS.map((statistic, index) => {\n      styles.push({\n        animationDelay: `${750 + index * 250}ms`\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Level\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, PRIMARY_STATISTICS.map((statistic, index) => /*#__PURE__*/React.createElement(animated.div, {\n    key: index,\n    className: classnames('level-item', `is-${statistic}`, 'fadeInUp'),\n    style: trail[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LevelItem, Object.assign({\n    statistic\n  }, {\n    total: getStatistic(data, 'total', statistic),\n    delta: getStatistic(data, 'delta', statistic),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  })))));\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(getStatistic(prevProps.data, 'total', 'active'), getStatistic(currProps.data, 'total', 'active'))) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default React.memo(Level, isEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Level.js"],"names":["PRIMARY_STATISTICS","STATISTIC_CONFIGS","SPRING_CONFIG_NUMBERS","capitalize","formatNumber","getStatistic","HeartFillIcon","classnames","equal","React","useMemo","useTranslation","animated","useSpring","PureLevelItem","statistic","total","delta","t","spring","config","statisticConfig","displayName","interpolate","format","LevelItem","memo","Level","data","trail","styles","map","index","push","animationDelay","isEqual","prevProps","currProps"],"mappings":"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","sourcesContent":["import {\n  PRIMARY_STATISTICS,\n  STATISTIC_CONFIGS,\n  SPRING_CONFIG_NUMBERS,\n} from '../constants';\nimport {capitalize, formatNumber, getStatistic} from '../utils/commonFunctions';\n\nimport {HeartFillIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React, {useMemo} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {animated, useSpring} from 'react-spring';\n\nfunction PureLevelItem({statistic, total, delta}) {\n  const {t} = useTranslation();\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <React.Fragment>\n      <h5>{t(capitalize(statisticConfig.displayName))}</h5>\n      <animated.h4>\n        {statistic !== 'active' ? (\n          delta > 0 ? (\n            spring.delta.interpolate(\n              (delta) =>\n                `+${formatNumber(delta, statisticConfig.format, statistic)}`\n            )\n          ) : (\n            <HeartFillIcon size={9} verticalAlign={2} />\n          )\n        ) : (\n          '\\u00A0'\n        )}\n      </animated.h4>\n      <animated.h1>\n        {spring.total.interpolate((total) =>\n          formatNumber(total, statisticConfig.format, statistic)\n        )}\n      </animated.h1>\n    </React.Fragment>\n  );\n}\n\nconst LevelItem = React.memo(PureLevelItem);\n\nfunction Level({data}) {\n  const trail = useMemo(() => {\n    const styles = [];\n\n    PRIMARY_STATISTICS.map((statistic, index) => {\n      styles.push({\n        animationDelay: `${750 + index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  return (\n    <div className=\"Level\">\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <animated.div\n          key={index}\n          className={classnames('level-item', `is-${statistic}`, 'fadeInUp')}\n          style={trail[index]}\n        >\n          <LevelItem\n            {...{statistic}}\n            total={getStatistic(data, 'total', statistic)}\n            delta={getStatistic(data, 'delta', statistic)}\n          />\n        </animated.div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (\n    !equal(\n      getStatistic(prevProps.data, 'total', 'active'),\n      getStatistic(currProps.data, 'total', 'active')\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Level, isEqual);\n"]},"metadata":{},"sourceType":"module"}