{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Minigraphs.js\";\nimport { MINIGRAPH_LOOKBACK_DAYS, PRIMARY_STATISTICS, STATISTIC_CONFIGS } from '../constants';\nimport { getStatistic, getIndiaYesterdayISO, parseIndiaDate } from '../utils/commonFunctions';\nimport classnames from 'classnames';\nimport { max } from 'd3-array';\nimport { interpolatePath } from 'd3-interpolate-path';\nimport { scaleTime, scaleLinear } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { line, curveMonotoneX } from 'd3-shape'; // eslint-disable-next-line\n\nimport { transition } from 'd3-transition';\nimport { formatISO, subDays } from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, { useEffect, useRef, useMemo } from 'react'; // Dimensions\n\nconst [width, height] = [100, 75];\nconst margin = {\n  top: 10,\n  right: 10,\n  bottom: 2,\n  left: 5\n};\n\nfunction Minigraphs({\n  timeseries,\n  date: timelineDate\n}) {\n  const refs = useRef([]);\n  const dates = useMemo(() => {\n    const cutOffDateUpper = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(timeseries || {}).filter(date => date <= cutOffDateUpper);\n    const lastDate = pastDates[pastDates.length - 1];\n    const cutOffDateLower = formatISO(subDays(parseIndiaDate(lastDate), MINIGRAPH_LOOKBACK_DAYS), {\n      representation: 'date'\n    });\n    return pastDates.filter(date => date >= cutOffDateLower);\n  }, [timeseries, timelineDate]);\n  useEffect(() => {\n    const T = dates.length;\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const xScale = scaleTime().clamp(true).domain(T ? [parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])] : []).range([margin.left, chartRight]);\n    refs.current.forEach((ref, index) => {\n      const svg = select(ref);\n      const statistic = PRIMARY_STATISTICS[index];\n      const color = STATISTIC_CONFIGS[statistic].color;\n      const dailyMaxAbs = max(dates, date => Math.abs(getStatistic(timeseries[date], 'delta', statistic)));\n      const yScale = scaleLinear().clamp(true).domain([-dailyMaxAbs, dailyMaxAbs]).range([chartBottom, margin.top]);\n      const linePath = line().curve(curveMonotoneX).x(date => xScale(parseIndiaDate(date))).y(date => yScale(getStatistic(timeseries[date], 'delta', statistic)));\n      let pathLength;\n      svg.selectAll('path').data(T ? [dates] : []).join(enter => enter.append('path').attr('fill', 'none').attr('stroke', color + '99').attr('stroke-width', 2.5).attr('d', linePath).attr('stroke-dasharray', function () {\n        return pathLength = this.getTotalLength();\n      }).call(enter => enter.attr('stroke-dashoffset', pathLength).transition().delay(100).duration(2500).attr('stroke-dashoffset', 0)), update => update.attr('stroke-dasharray', null).transition().duration(500).attrTween('d', function (date) {\n        const previous = select(this).attr('d');\n        const current = linePath(date);\n        return interpolatePath(previous, current);\n      }));\n      svg.selectAll('circle').data(T ? [dates[T - 1]] : []).join(enter => enter.append('circle').attr('fill', color).attr('r', 2.5).attr('cx', date => xScale(parseIndiaDate(date))).attr('cy', date => yScale(getStatistic(timeseries[date], 'delta', statistic))).style('opacity', 0).call(enter => enter.transition().delay(2100).duration(500).style('opacity', 1).attr('cx', date => xScale(parseIndiaDate(date))).attr('cy', date => yScale(getStatistic(timeseries[date], 'delta', statistic)))), update => update.transition().duration(500).attr('cx', date => xScale(parseIndiaDate(date))).attr('cy', date => yScale(getStatistic(timeseries[date], 'delta', statistic))));\n    });\n  }, [dates, timeseries]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Minigraph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, PRIMARY_STATISTICS.map((statistic, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: statistic,\n    className: classnames('svg-parent'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: el => {\n      refs.current[index] = el;\n    },\n    width: width,\n    height: height,\n    viewBox: `0 0 ${width} ${height}`,\n    preserveAspectRatio: \"xMidYMid meet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }))));\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  } else if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default React.memo(Minigraphs, isEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Minigraphs.js"],"names":["MINIGRAPH_LOOKBACK_DAYS","PRIMARY_STATISTICS","STATISTIC_CONFIGS","getStatistic","getIndiaYesterdayISO","parseIndiaDate","classnames","max","interpolatePath","scaleTime","scaleLinear","select","line","curveMonotoneX","transition","formatISO","subDays","equal","React","useEffect","useRef","useMemo","width","height","margin","top","right","bottom","left","Minigraphs","timeseries","date","timelineDate","refs","dates","cutOffDateUpper","pastDates","Object","keys","filter","lastDate","length","cutOffDateLower","representation","T","chartRight","chartBottom","xScale","clamp","domain","range","current","forEach","ref","index","svg","statistic","color","dailyMaxAbs","Math","abs","yScale","linePath","curve","x","y","pathLength","selectAll","data","join","enter","append","attr","getTotalLength","call","delay","duration","update","attrTween","previous","style","map","el","isEqual","prevProps","currProps","forceRender","stateCode","memo"],"mappings":"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","sourcesContent":["import {\n  MINIGRAPH_LOOKBACK_DAYS,\n  PRIMARY_STATISTICS,\n  STATISTIC_CONFIGS,\n} from '../constants';\nimport {\n  getStatistic,\n  getIndiaYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {max} from 'd3-array';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear} from 'd3-scale';\nimport {select} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\n// eslint-disable-next-line\nimport {transition} from 'd3-transition';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef, useMemo} from 'react';\n\n// Dimensions\nconst [width, height] = [100, 75];\nconst margin = {top: 10, right: 10, bottom: 2, left: 5};\n\nfunction Minigraphs({timeseries, date: timelineDate}) {\n  const refs = useRef([]);\n\n  const dates = useMemo(() => {\n    const cutOffDateUpper = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= cutOffDateUpper\n    );\n    const lastDate = pastDates[pastDates.length - 1];\n\n    const cutOffDateLower = formatISO(\n      subDays(parseIndiaDate(lastDate), MINIGRAPH_LOOKBACK_DAYS),\n      {representation: 'date'}\n    );\n    return pastDates.filter((date) => date >= cutOffDateLower);\n  }, [timeseries, timelineDate]);\n\n  useEffect(() => {\n    const T = dates.length;\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const xScale = scaleTime()\n      .clamp(true)\n      .domain(T ? [parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])] : [])\n      .range([margin.left, chartRight]);\n\n    refs.current.forEach((ref, index) => {\n      const svg = select(ref);\n      const statistic = PRIMARY_STATISTICS[index];\n      const color = STATISTIC_CONFIGS[statistic].color;\n\n      const dailyMaxAbs = max(dates, (date) =>\n        Math.abs(getStatistic(timeseries[date], 'delta', statistic))\n      );\n\n      const yScale = scaleLinear()\n        .clamp(true)\n        .domain([-dailyMaxAbs, dailyMaxAbs])\n        .range([chartBottom, margin.top]);\n\n      const linePath = line()\n        .curve(curveMonotoneX)\n        .x((date) => xScale(parseIndiaDate(date)))\n        .y((date) =>\n          yScale(getStatistic(timeseries[date], 'delta', statistic))\n        );\n\n      let pathLength;\n      svg\n        .selectAll('path')\n        .data(T ? [dates] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('path')\n              .attr('fill', 'none')\n              .attr('stroke', color + '99')\n              .attr('stroke-width', 2.5)\n              .attr('d', linePath)\n              .attr('stroke-dasharray', function () {\n                return (pathLength = this.getTotalLength());\n              })\n              .call((enter) =>\n                enter\n                  .attr('stroke-dashoffset', pathLength)\n                  .transition()\n                  .delay(100)\n                  .duration(2500)\n                  .attr('stroke-dashoffset', 0)\n              ),\n          (update) =>\n            update\n              .attr('stroke-dasharray', null)\n              .transition()\n              .duration(500)\n              .attrTween('d', function (date) {\n                const previous = select(this).attr('d');\n                const current = linePath(date);\n                return interpolatePath(previous, current);\n              })\n        );\n\n      svg\n        .selectAll('circle')\n        .data(T ? [dates[T - 1]] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('circle')\n              .attr('fill', color)\n              .attr('r', 2.5)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n              .style('opacity', 0)\n              .call((enter) =>\n                enter\n                  .transition()\n                  .delay(2100)\n                  .duration(500)\n                  .style('opacity', 1)\n                  .attr('cx', (date) => xScale(parseIndiaDate(date)))\n                  .attr('cy', (date) =>\n                    yScale(getStatistic(timeseries[date], 'delta', statistic))\n                  )\n              ),\n          (update) =>\n            update\n              .transition()\n              .duration(500)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n        );\n    });\n  }, [dates, timeseries]);\n\n  return (\n    <div className=\"Minigraph\">\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <div key={statistic} className={classnames('svg-parent')}>\n          <svg\n            ref={(el) => {\n              refs.current[index] = el;\n            }}\n            width={width}\n            height={height}\n            viewBox={`0 0 ${width} ${height}`}\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  } else if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Minigraphs, isEqual);\n"]},"metadata":{},"sourceType":"module"}