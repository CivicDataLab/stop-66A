{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/StateMeta.js\";\nimport StateMetaCard from './StateMetaCard';\nimport { STATE_NAMES } from '../constants';\nimport { formatDate, formatNumber, formatLastUpdated, getStatistic, getIndiaYesterdayISO, parseIndiaDate } from '../utils/commonFunctions';\nimport { differenceInDays } from 'date-fns';\nimport React from 'react';\nimport { Compass } from 'react-feather';\n\nfunction StateMeta({\n  stateCode,\n  data,\n  timeseries\n}) {\n  var _data$stateCode, _data$stateCode$meta, _data$stateCode2, _data$stateCode2$meta, _data$stateCode2$meta2;\n\n  const pastDates = Object.keys(timeseries || {}).filter(date => date <= getIndiaYesterdayISO());\n  const lastDate = pastDates[pastDates.length - 1];\n  const lastConfirmed = getStatistic(timeseries === null || timeseries === void 0 ? void 0 : timeseries[lastDate], 'total', 'confirmed');\n  const prevWeekDate = pastDates.reverse().find(date => differenceInDays(parseIndiaDate(lastDate), parseIndiaDate(date)) >= 7);\n  const prevWeekConfirmed = getStatistic(timeseries === null || timeseries === void 0 ? void 0 : timeseries[prevWeekDate], 'total', 'confirmed');\n  const diffDays = differenceInDays(parseIndiaDate(lastDate), parseIndiaDate(prevWeekDate));\n  const confirmedPerMillion = getStatistic(data[stateCode], 'total', 'confirmed', true);\n  const testPerMillion = getStatistic(data[stateCode], 'total', 'tested', true);\n  const totalConfirmedPerMillion = getStatistic(data['TT'], 'total', 'confirmed', true);\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(data[stateCode], 'total', 'recoveryRatio');\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\n  const growthRate = (lastConfirmed - prevWeekConfirmed) / prevWeekConfirmed * 100 / diffDays;\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"StateMeta population\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"meta-item population\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Population\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, formatNumber((_data$stateCode = data[stateCode]) === null || _data$stateCode === void 0 ? void 0 : (_data$stateCode$meta = _data$stateCode.meta) === null || _data$stateCode$meta === void 0 ? void 0 : _data$stateCode$meta.population))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Compass, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"Based on 2019 population projection by NCP\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\",\n    target: \"_noblank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"report\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"StateMeta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"confirmed\",\n    title: 'Confirmed Per Million',\n    statistic: formatNumber(confirmedPerMillion),\n    total: formatNumber(totalConfirmedPerMillion),\n    formula: '(confirmed / state population) * 1 Million',\n    description: `\n            ~${formatNumber(Math.round(confirmedPerMillion))} out of every 10 lakh people in ${STATE_NAMES[stateCode]} have tested positive for the virus.\n            `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"active\",\n    title: 'Active Ratio',\n    statistic: `${formatNumber(activePercent, '%')}`,\n    formula: '(active / confirmed) * 100',\n    description: activePercent > 0 ? `For every 100 confirmed cases, ~${formatNumber(Math.round(activePercent))} are currently infected.` : 'Currently, there are no active cases in this state.',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"recovery\",\n    title: 'Recovery Ratio',\n    statistic: `${formatNumber(recoveryPercent, '%')}`,\n    formula: '(recovered / confirmed) * 100',\n    description: recoveryPercent > 0 ? `For every 100 confirmed cases, ~${formatNumber(Math.round(recoveryPercent))} have recovered from the virus.` : 'Unfortunately, there are no recoveries in this state yet.',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"mortality\",\n    title: 'Case Fatality Ratio',\n    statistic: `${formatNumber(deathPercent, '%')}`,\n    formula: '(deceased / confirmed) * 100',\n    description: deathPercent > 0 ? `For every 100 confirmed cases, ~${formatNumber(Math.round(deathPercent))} have unfortunately passed away from the virus.` : 'Fortunately, no one has passed away from the virus in this state.',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"gr\",\n    title: 'Avg. Growth Rate',\n    statistic: growthRate > 0 ? `${formatNumber(growthRate, '%')}` : '-',\n    formula: '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7',\n    date: `${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(lastDate, 'dd MMM')}`,\n    description: growthRate > 0 ? `In the last one week, the number of new infections has\n              grown by an average of ${formatNumber(growthRate, '%')}\n              every day.` : 'There has been no growth in the number of infections in last one week.',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"tpm\",\n    title: 'Tests Per Million',\n    statistic: `${formatNumber(testPerMillion)}`,\n    formula: '(total tests in state / total population of state) * 1 Million',\n    date: testPerMillion ? `As of ${formatLastUpdated((_data$stateCode2 = data[stateCode]) === null || _data$stateCode2 === void 0 ? void 0 : (_data$stateCode2$meta = _data$stateCode2.meta) === null || _data$stateCode2$meta === void 0 ? void 0 : (_data$stateCode2$meta2 = _data$stateCode2$meta.tested) === null || _data$stateCode2$meta2 === void 0 ? void 0 : _data$stateCode2$meta2['last_updated'])} ago` : '',\n    description: testPerMillion > 0 ? `For every 10 lakh people in ${STATE_NAMES[stateCode]},\n                ~${formatNumber(Math.round(testPerMillion))} samples were tested.` : 'No tests have been conducted in this state yet.',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  })));\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default React.memo(StateMeta, isEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/StateMeta.js"],"names":["StateMetaCard","STATE_NAMES","formatDate","formatNumber","formatLastUpdated","getStatistic","getIndiaYesterdayISO","parseIndiaDate","differenceInDays","React","Compass","StateMeta","stateCode","data","timeseries","pastDates","Object","keys","filter","date","lastDate","length","lastConfirmed","prevWeekDate","reverse","find","prevWeekConfirmed","diffDays","confirmedPerMillion","testPerMillion","totalConfirmedPerMillion","activePercent","recoveryPercent","deathPercent","growthRate","meta","population","Math","round","tested","isEqual","prevProps","currProps","memo"],"mappings":"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","sourcesContent":["import StateMetaCard from './StateMetaCard';\n\nimport {STATE_NAMES} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport {differenceInDays} from 'date-fns';\nimport React from 'react';\nimport {Compass} from 'react-feather';\n\nfunction StateMeta({stateCode, data, timeseries}) {\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaYesterdayISO()\n  );\n  const lastDate = pastDates[pastDates.length - 1];\n  const lastConfirmed = getStatistic(\n    timeseries?.[lastDate],\n    'total',\n    'confirmed'\n  );\n  const prevWeekDate = pastDates\n    .reverse()\n    .find(\n      (date) =>\n        differenceInDays(parseIndiaDate(lastDate), parseIndiaDate(date)) >= 7\n    );\n  const prevWeekConfirmed = getStatistic(\n    timeseries?.[prevWeekDate],\n    'total',\n    'confirmed'\n  );\n  const diffDays = differenceInDays(\n    parseIndiaDate(lastDate),\n    parseIndiaDate(prevWeekDate)\n  );\n\n  const confirmedPerMillion = getStatistic(\n    data[stateCode],\n    'total',\n    'confirmed',\n    true\n  );\n  const testPerMillion = getStatistic(data[stateCode], 'total', 'tested', true);\n  const totalConfirmedPerMillion = getStatistic(\n    data['TT'],\n    'total',\n    'confirmed',\n    true\n  );\n\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(\n    data[stateCode],\n    'total',\n    'recoveryRatio'\n  );\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\n\n  const growthRate =\n    (((lastConfirmed - prevWeekConfirmed) / prevWeekConfirmed) * 100) /\n    diffDays;\n\n  return (\n    <React.Fragment>\n      <div className=\"StateMeta population\">\n        <div className=\"meta-item population\">\n          <h3>Population</h3>\n          <h1>{formatNumber(data[stateCode]?.meta?.population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Compass />\n          <div className=\"alert-right\">\n            Based on 2019 population projection by NCP{' '}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Million'}\n          statistic={formatNumber(confirmedPerMillion)}\n          total={formatNumber(totalConfirmedPerMillion)}\n          formula={'(confirmed / state population) * 1 Million'}\n          description={`\n            ~${formatNumber(\n              Math.round(confirmedPerMillion)\n            )} out of every 10 lakh people in ${\n            STATE_NAMES[stateCode]\n          } have tested positive for the virus.\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active Ratio'}\n          statistic={`${formatNumber(activePercent, '%')}`}\n          formula={'(active / confirmed) * 100'}\n          description={\n            activePercent > 0\n              ? `For every 100 confirmed cases, ~${formatNumber(\n                  Math.round(activePercent)\n                )} are currently infected.`\n              : 'Currently, there are no active cases in this state.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Ratio'}\n          statistic={`${formatNumber(recoveryPercent, '%')}`}\n          formula={'(recovered / confirmed) * 100'}\n          description={\n            recoveryPercent > 0\n              ? `For every 100 confirmed cases, ~${formatNumber(\n                  Math.round(recoveryPercent)\n                )} have recovered from the virus.`\n              : 'Unfortunately, there are no recoveries in this state yet.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Case Fatality Ratio'}\n          statistic={`${formatNumber(deathPercent, '%')}`}\n          formula={'(deceased / confirmed) * 100'}\n          description={\n            deathPercent > 0\n              ? `For every 100 confirmed cases, ~${formatNumber(\n                  Math.round(deathPercent)\n                )} have unfortunately passed away from the virus.`\n              : 'Fortunately, no one has passed away from the virus in this state.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"gr\"\n          title={'Avg. Growth Rate'}\n          statistic={growthRate > 0 ? `${formatNumber(growthRate, '%')}` : '-'}\n          formula={\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\n          }\n          date={`${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(\n            lastDate,\n            'dd MMM'\n          )}`}\n          description={\n            growthRate > 0\n              ? `In the last one week, the number of new infections has\n              grown by an average of ${formatNumber(growthRate, '%')}\n              every day.`\n              : 'There has been no growth in the number of infections in last one week.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Million'}\n          statistic={`${formatNumber(testPerMillion)}`}\n          formula={\n            '(total tests in state / total population of state) * 1 Million'\n          }\n          date={\n            testPerMillion\n              ? `As of ${formatLastUpdated(\n                  data[stateCode]?.meta?.tested?.['last_updated']\n                )} ago`\n              : ''\n          }\n          description={\n            testPerMillion > 0\n              ? `For every 10 lakh people in ${STATE_NAMES[stateCode]},\n                ~${formatNumber(\n                  Math.round(testPerMillion)\n                )} samples were tested.`\n              : 'No tests have been conducted in this state yet.'\n          }\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(StateMeta, isEqual);\n"]},"metadata":{},"sourceType":"module"}