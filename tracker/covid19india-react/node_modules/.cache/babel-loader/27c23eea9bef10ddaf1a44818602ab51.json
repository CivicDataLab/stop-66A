{"ast":null,"code":"import { INDIA_ISO_SUFFIX, ISO_DATE_REGEX, LOCALE_SHORTHANDS, NAN_STATISTICS, PER_MILLION_OPTIONS, STATISTIC_OPTIONS, TESTED_LOOKBACK_DAYS } from '../constants';\nimport { differenceInDays, format, formatDistance, formatISO, subDays } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport i18n from 'i18next';\nlet locale = null;\nconst numberFormatter = new Intl.NumberFormat('en-IN', {\n  maximumFractionDigits: 1\n});\n\nconst getLocale = () => {\n  import('date-fns/locale/').then(localePackage => {\n    locale = localePackage[LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') return true;\n  return false;\n};\nexport const getIndiaDate = () => {\n  return utcToZonedTime(new Date(), 'Asia/Kolkata');\n};\nexport const getIndiaDateISO = () => {\n  return formatISO(getIndiaDate(), {\n    representation: 'date'\n  });\n};\nexport const getIndiaYesterdayISO = () => {\n  return formatISO(subDays(getIndiaDate(), 1), {\n    representation: 'date'\n  });\n};\nexport const formatLastUpdated = unformattedDate => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale\n  });\n};\nexport const parseIndiaDate = isoDate => {\n  if (!isoDate) return getIndiaDate();\n  if (isoDate.match(ISO_DATE_REGEX)) isoDate += INDIA_ISO_SUFFIX;\n  return utcToZonedTime(new Date(isoDate), 'Asia/Kolkata');\n};\nexport const formatDate = (unformattedDate, formatString) => {\n  if (!unformattedDate) return '';\n  if (typeof unformattedDate === 'string' && unformattedDate.match(ISO_DATE_REGEX)) unformattedDate += INDIA_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), 'Asia/Kolkata');\n  return format(date, formatString, {\n    locale: locale\n  });\n};\nexport const abbreviateNumber = number => {\n  if (Math.abs(number) < 1e3) return numberFormatter.format(number);else if (Math.abs(number) >= 1e3 && Math.abs(number) < 1e5) return numberFormatter.format(number / 1e3) + 'K';else if (Math.abs(number) >= 1e5 && Math.abs(number) < 1e7) return numberFormatter.format(number / 1e5) + 'L';else if (Math.abs(number) >= 1e7 && Math.abs(number) < 1e10) return numberFormatter.format(number / 1e7) + 'Cr';else if (Math.abs(number) >= 1e10 && Math.abs(number) < 1e14) return numberFormatter.format(number / 1e10) + 'K Cr';else if (Math.abs(number) >= 1e14) return numberFormatter.format(number / 1e14) + 'L Cr';\n};\nexport const formatNumber = (value, option, statistic) => {\n  if (statistic && value === 0 && NAN_STATISTICS.includes(statistic)) value = NaN;\n  if (isNaN(value)) return '-';else if (option === 'short') {\n    return abbreviateNumber(value);\n  } else if (option === 'int') {\n    value = Math.floor(value);\n  }\n  return numberFormatter.format(value) + (option === '%' ? '%' : '');\n};\nexport const capitalize = s => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\nexport const toTitleCase = str => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\nexport const getStatistic = (data, type, statistic, perMillion = false) => {\n  var _STATISTIC_OPTIONS$st;\n\n  const {\n    key,\n    normalizeByKey: normalizeBy,\n    multiplyFactor\n  } = { ...STATISTIC_OPTIONS[statistic],\n    ...(perMillion && !((_STATISTIC_OPTIONS$st = STATISTIC_OPTIONS[statistic]) === null || _STATISTIC_OPTIONS$st === void 0 ? void 0 : _STATISTIC_OPTIONS$st.normalizeByKey) && PER_MILLION_OPTIONS)\n  };\n  let count;\n\n  if (key === 'population') {\n    var _data$meta;\n\n    count = type === 'total' ? data === null || data === void 0 ? void 0 : (_data$meta = data.meta) === null || _data$meta === void 0 ? void 0 : _data$meta.population : 0;\n  } else if (key === 'tested') {\n    var _data$type;\n\n    count = data === null || data === void 0 ? void 0 : (_data$type = data[type]) === null || _data$type === void 0 ? void 0 : _data$type.tested;\n  } else if (key === 'active') {\n    var _data$type2, _data$type3, _data$type4, _data$type5;\n\n    const confirmed = (data === null || data === void 0 ? void 0 : (_data$type2 = data[type]) === null || _data$type2 === void 0 ? void 0 : _data$type2.confirmed) || 0;\n    const deceased = (data === null || data === void 0 ? void 0 : (_data$type3 = data[type]) === null || _data$type3 === void 0 ? void 0 : _data$type3.deceased) || 0;\n    const recovered = (data === null || data === void 0 ? void 0 : (_data$type4 = data[type]) === null || _data$type4 === void 0 ? void 0 : _data$type4.recovered) || 0;\n    const other = (data === null || data === void 0 ? void 0 : (_data$type5 = data[type]) === null || _data$type5 === void 0 ? void 0 : _data$type5.other) || 0;\n    count = confirmed - deceased - recovered - other;\n  } else {\n    var _data$type6;\n\n    count = data === null || data === void 0 ? void 0 : (_data$type6 = data[type]) === null || _data$type6 === void 0 ? void 0 : _data$type6[key];\n  }\n\n  if (normalizeBy) {\n    if (type === 'total') {\n      const normStatistic = getStatistic(data, 'total', normalizeBy);\n      count /= normStatistic;\n    } else {\n      const currStatisticDelta = count;\n      const currStatistic = getStatistic(data, 'total', key);\n      const prevStatistic = currStatistic - currStatisticDelta;\n      const normStatisticDelta = getStatistic(data, 'delta', {\n        key: normalizeBy\n      });\n      const normStatistic = getStatistic(data, 'total', normalizeBy);\n      const prevNormStatistic = normStatistic - normStatisticDelta;\n      count = currStatistic / normStatistic - prevStatistic / prevNormStatistic;\n    }\n  }\n\n  return (multiplyFactor || 1) * (isFinite(count) && count || 0);\n};\nexport const getTableStatistic = (data, statistic, isPerMillion, lastUpdatedTT) => {\n  var _data$meta2, _data$meta2$tested;\n\n  const expired = (STATISTIC_OPTIONS[statistic].key === 'tested' || STATISTIC_OPTIONS[statistic].normalizeByKey === 'tested') && differenceInDays(lastUpdatedTT, parseIndiaDate((_data$meta2 = data.meta) === null || _data$meta2 === void 0 ? void 0 : (_data$meta2$tested = _data$meta2.tested) === null || _data$meta2$tested === void 0 ? void 0 : _data$meta2$tested['last_updated'])) > TESTED_LOOKBACK_DAYS;\n  const total = !expired ? getStatistic(data, 'total', statistic, isPerMillion) : 0;\n  const delta = !expired ? getStatistic(data, 'delta', statistic, isPerMillion) : 0;\n  return {\n    total,\n    delta\n  };\n};\nexport const fetcher = url => {\n  return fetch(url).then(response => {\n    return response.json();\n  });\n};","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/utils/commonFunctions.js"],"names":["INDIA_ISO_SUFFIX","ISO_DATE_REGEX","LOCALE_SHORTHANDS","NAN_STATISTICS","PER_MILLION_OPTIONS","STATISTIC_OPTIONS","TESTED_LOOKBACK_DAYS","differenceInDays","format","formatDistance","formatISO","subDays","utcToZonedTime","i18n","locale","numberFormatter","Intl","NumberFormat","maximumFractionDigits","getLocale","then","localePackage","language","window","localStorage","i18nextLng","isDevelopmentOrTest","process","env","NODE_ENV","getIndiaDate","Date","getIndiaDateISO","representation","getIndiaYesterdayISO","formatLastUpdated","unformattedDate","parseIndiaDate","isoDate","match","formatDate","formatString","date","abbreviateNumber","number","Math","abs","formatNumber","value","option","statistic","includes","NaN","isNaN","floor","capitalize","s","charAt","toUpperCase","slice","toTitleCase","str","replace","txt","substr","toLowerCase","getStatistic","data","type","perMillion","key","normalizeByKey","normalizeBy","multiplyFactor","count","meta","population","tested","confirmed","deceased","recovered","other","normStatistic","currStatisticDelta","currStatistic","prevStatistic","normStatisticDelta","prevNormStatistic","isFinite","getTableStatistic","isPerMillion","lastUpdatedTT","expired","total","delta","fetcher","url","fetch","response","json"],"mappings":"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","sourcesContent":["import {\n  INDIA_ISO_SUFFIX,\n  ISO_DATE_REGEX,\n  LOCALE_SHORTHANDS,\n  NAN_STATISTICS,\n  PER_MILLION_OPTIONS,\n  STATISTIC_OPTIONS,\n  TESTED_LOOKBACK_DAYS,\n} from '../constants';\n\nimport {\n  differenceInDays,\n  format,\n  formatDistance,\n  formatISO,\n  subDays,\n} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport i18n from 'i18next';\n\nlet locale = null;\nconst numberFormatter = new Intl.NumberFormat('en-IN', {\n  maximumFractionDigits: 1,\n});\n\nconst getLocale = () => {\n  import('date-fns/locale/').then((localePackage) => {\n    locale =\n      localePackage[\n        LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]\n      ];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\n    return true;\n  return false;\n};\n\nexport const getIndiaDate = () => {\n  return utcToZonedTime(new Date(), 'Asia/Kolkata');\n};\n\nexport const getIndiaDateISO = () => {\n  return formatISO(getIndiaDate(), {representation: 'date'});\n};\n\nexport const getIndiaYesterdayISO = () => {\n  return formatISO(subDays(getIndiaDate(), 1), {representation: 'date'});\n};\n\nexport const formatLastUpdated = (unformattedDate) => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale,\n  });\n};\n\nexport const parseIndiaDate = (isoDate) => {\n  if (!isoDate) return getIndiaDate();\n  if (isoDate.match(ISO_DATE_REGEX)) isoDate += INDIA_ISO_SUFFIX;\n  return utcToZonedTime(new Date(isoDate), 'Asia/Kolkata');\n};\n\nexport const formatDate = (unformattedDate, formatString) => {\n  if (!unformattedDate) return '';\n  if (\n    typeof unformattedDate === 'string' &&\n    unformattedDate.match(ISO_DATE_REGEX)\n  )\n    unformattedDate += INDIA_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), 'Asia/Kolkata');\n  return format(date, formatString, {\n    locale: locale,\n  });\n};\n\nexport const abbreviateNumber = (number) => {\n  if (Math.abs(number) < 1e3) return numberFormatter.format(number);\n  else if (Math.abs(number) >= 1e3 && Math.abs(number) < 1e5)\n    return numberFormatter.format(number / 1e3) + 'K';\n  else if (Math.abs(number) >= 1e5 && Math.abs(number) < 1e7)\n    return numberFormatter.format(number / 1e5) + 'L';\n  else if (Math.abs(number) >= 1e7 && Math.abs(number) < 1e10)\n    return numberFormatter.format(number / 1e7) + 'Cr';\n  else if (Math.abs(number) >= 1e10 && Math.abs(number) < 1e14)\n    return numberFormatter.format(number / 1e10) + 'K Cr';\n  else if (Math.abs(number) >= 1e14)\n    return numberFormatter.format(number / 1e14) + 'L Cr';\n};\n\nexport const formatNumber = (value, option, statistic) => {\n  if (statistic && value === 0 && NAN_STATISTICS.includes(statistic))\n    value = NaN;\n\n  if (isNaN(value)) return '-';\n  else if (option === 'short') {\n    return abbreviateNumber(value);\n  } else if (option === 'int') {\n    value = Math.floor(value);\n  }\n  return numberFormatter.format(value) + (option === '%' ? '%' : '');\n};\n\nexport const capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexport const getStatistic = (data, type, statistic, perMillion = false) => {\n  const {key, normalizeByKey: normalizeBy, multiplyFactor} = {\n    ...STATISTIC_OPTIONS[statistic],\n    ...(perMillion &&\n      !STATISTIC_OPTIONS[statistic]?.normalizeByKey &&\n      PER_MILLION_OPTIONS),\n  };\n\n  let count;\n  if (key === 'population') {\n    count = type === 'total' ? data?.meta?.population : 0;\n  } else if (key === 'tested') {\n    count = data?.[type]?.tested;\n  } else if (key === 'active') {\n    const confirmed = data?.[type]?.confirmed || 0;\n    const deceased = data?.[type]?.deceased || 0;\n    const recovered = data?.[type]?.recovered || 0;\n    const other = data?.[type]?.other || 0;\n    count = confirmed - deceased - recovered - other;\n  } else {\n    count = data?.[type]?.[key];\n  }\n\n  if (normalizeBy) {\n    if (type === 'total') {\n      const normStatistic = getStatistic(data, 'total', normalizeBy);\n      count /= normStatistic;\n    } else {\n      const currStatisticDelta = count;\n      const currStatistic = getStatistic(data, 'total', key);\n      const prevStatistic = currStatistic - currStatisticDelta;\n\n      const normStatisticDelta = getStatistic(data, 'delta', {\n        key: normalizeBy,\n      });\n      const normStatistic = getStatistic(data, 'total', normalizeBy);\n      const prevNormStatistic = normStatistic - normStatisticDelta;\n\n      count = currStatistic / normStatistic - prevStatistic / prevNormStatistic;\n    }\n  }\n\n  return (multiplyFactor || 1) * ((isFinite(count) && count) || 0);\n};\n\nexport const getTableStatistic = (\n  data,\n  statistic,\n  isPerMillion,\n  lastUpdatedTT\n) => {\n  const expired =\n    (STATISTIC_OPTIONS[statistic].key === 'tested' ||\n      STATISTIC_OPTIONS[statistic].normalizeByKey === 'tested') &&\n    differenceInDays(\n      lastUpdatedTT,\n      parseIndiaDate(data.meta?.tested?.['last_updated'])\n    ) > TESTED_LOOKBACK_DAYS;\n\n  const total = !expired\n    ? getStatistic(data, 'total', statistic, isPerMillion)\n    : 0;\n  const delta = !expired\n    ? getStatistic(data, 'delta', statistic, isPerMillion)\n    : 0;\n  return {total, delta};\n};\n\nexport const fetcher = (url) => {\n  return fetch(url).then((response) => {\n    return response.json();\n  });\n};\n"]},"metadata":{},"sourceType":"module"}