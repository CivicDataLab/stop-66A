{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Timeseries.js\";\nimport { D3_TRANSITION_DURATION, STATISTIC_CONFIGS, TIMESERIES_STATISTICS } from '../constants';\nimport { useResizeObserver } from '../hooks/useResizeObserver';\nimport { capitalize, formatNumber, formatDate, getStatistic, parseIndiaDate } from '../utils/commonFunctions';\nimport classnames from 'classnames';\nimport { min, max, bisector } from 'd3-array';\nimport { axisBottom, axisRight } from 'd3-axis';\nimport { interpolatePath } from 'd3-interpolate-path';\nimport { scaleTime, scaleLinear, scaleLog } from 'd3-scale';\nimport { select, mouse } from 'd3-selection';\nimport { line, curveMonotoneX } from 'd3-shape'; // eslint-disable-next-line\n\nimport { transition } from 'd3-transition';\nimport equal from 'fast-deep-equal';\nimport React, { useCallback, useEffect, useRef, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next'; // Chart margins\n\nconst margin = {\n  top: 15,\n  right: 35,\n  bottom: 25,\n  left: 25\n};\n\nfunction Timeseries({\n  timeseries,\n  dates,\n  chartType,\n  isUniform,\n  isLog\n}) {\n  const {\n    t\n  } = useTranslation();\n  const refs = useRef([]);\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [highlightedDate, setHighlightedDate] = useState();\n  useEffect(() => {\n    setHighlightedDate(dates[dates.length - 1]);\n  }, [dates]);\n  const getBarWidth = useCallback(() => {\n    const T = dates.length; // Dimensions\n\n    const {\n      width\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // Chart extremes\n\n    const chartRight = width - margin.right; // Bar widths\n\n    const axisWidth = chartRight - margin.left;\n    return Math.min(4, axisWidth / (1.25 * T));\n  }, [dates.length, dimensions]);\n  useEffect(() => {\n    const T = dates.length; // Dimensions\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // Chart extremes\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const barWidth = getBarWidth(); // Buffer space along y-axis\n\n    const yBufferTop = 1.2;\n    const yBufferBottom = 1.1;\n    const xScale = scaleTime().clamp(true).domain(T ? [parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])] : []).range([margin.left, chartRight]); // Number of x-axis ticks\n\n    const numTicksX = width < 480 ? 4 : 7;\n\n    const xAxis = g => g.attr('class', 'x-axis').call(axisBottom(xScale).ticks(numTicksX).tickFormat(date => formatDate(date, 'dd MMM')));\n\n    const xAxis2 = (g, yScale) => {\n      g.attr('class', 'x-axis2').call(axisBottom(xScale).tickValues([]).tickSize(0)).select('.domain').style('transform', `translateY(${yScale(0)}px)`);\n      if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);else g.select('.domain').attr('opacity', 0);\n    };\n\n    const yAxis = (g, yScale) => g.attr('class', 'y-axis').call(axisRight(yScale).ticks(4).tickFormat(num => formatNumber(num, 'short')).tickPadding(4));\n\n    const uniformScaleMin = min(dates, date => getStatistic(timeseries[date], chartType, 'active'));\n    const uniformScaleMax = max(dates, date => Math.max(getStatistic(timeseries[date], chartType, 'confirmed'), getStatistic(timeseries[date], chartType, 'recovered'), getStatistic(timeseries[date], chartType, 'deceased')));\n    const yScaleUniformLinear = scaleLinear().clamp(true).domain([uniformScaleMin, Math.max(1, yBufferTop * uniformScaleMax)]).nice(4).range([chartBottom, margin.top]);\n    const yScaleUniformLog = scaleLog().clamp(true).domain([Math.max(1, uniformScaleMin), Math.max(10, yBufferTop * uniformScaleMax)]).nice(4).range([chartBottom, margin.top]);\n\n    const generateYScale = statistic => {\n      if (isUniform && chartType === 'total' && isLog && statistic !== 'tested') return yScaleUniformLog;\n      if (isUniform && statistic !== 'tested') return yScaleUniformLinear;\n      if (chartType === 'total' && isLog) return scaleLog().clamp(true).domain([Math.max(1, min(dates, date => getStatistic(timeseries[date], chartType, statistic))), Math.max(10, yBufferTop * max(dates, date => getStatistic(timeseries[date], chartType, statistic)))]).nice(4).range([chartBottom, margin.top]);\n      return scaleLinear().clamp(true).domain([yBufferBottom * Math.min(0, min(dates, date => getStatistic(timeseries[date], chartType, statistic))), Math.max(1, yBufferTop * max(dates, date => getStatistic(timeseries[date], chartType, statistic)))]).nice(4).range([chartBottom, margin.top]);\n    };\n\n    function mousemove() {\n      const xm = mouse(this)[0];\n      const date = xScale.invert(xm);\n\n      if (!isNaN(date)) {\n        const bisectDate = bisector(date => parseIndiaDate(date)).left;\n        const index = bisectDate(dates, date, 1);\n        const dateLeft = dates[index - 1];\n        const dateRight = dates[index];\n        setHighlightedDate(date - parseIndiaDate(dateLeft) < parseIndiaDate(dateRight) - date ? dateLeft : dateRight);\n      }\n    }\n\n    function mouseout() {\n      setHighlightedDate(dates[T - 1]);\n    }\n    /* Begin drawing charts */\n\n\n    refs.current.forEach((ref, i) => {\n      const svg = select(ref);\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n      const statistic = TIMESERIES_STATISTICS[i];\n      const yScale = generateYScale(statistic);\n      const color = STATISTIC_CONFIGS[statistic].color;\n      /* X axis */\n\n      svg.select('.x-axis').style('transform', `translateY(${chartBottom}px)`).transition(t).call(xAxis);\n      svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n      /* Y axis */\n\n      svg.select('.y-axis').style('transform', `translateX(${chartRight}px)`).transition(t).call(yAxis, yScale);\n      /* Path dots */\n\n      svg.selectAll('circle').data(dates, date => date).join(enter => enter.append('circle').attr('fill', color).attr('stroke', color).attr('cy', chartBottom).attr('cx', date => xScale(parseIndiaDate(date))).attr('r', barWidth / 2)).transition(t).attr('cx', date => xScale(parseIndiaDate(date))).attr('cy', date => yScale(getStatistic(timeseries[date], chartType, statistic)));\n\n      if (chartType === 'total') {\n        svg.selectAll('.stem').transition(t).attr('y1', yScale(0)).attr('y2', yScale(0)).remove();\n        const linePath = line().curve(curveMonotoneX).x(date => xScale(parseIndiaDate(date))).y(date => yScale(getStatistic(timeseries[date], chartType, statistic)));\n        let pathLength;\n        svg.selectAll('.trend').data(T ? [dates] : []).join(enter => enter.append('path').attr('class', 'trend').attr('fill', 'none').attr('stroke', color + '50').attr('stroke-width', 4).attr('d', linePath).attr('stroke-dasharray', function () {\n          return pathLength = this.getTotalLength();\n        }).call(enter => enter.attr('stroke-dashoffset', pathLength).transition(t).attr('stroke-dashoffset', 0)), update => update.attr('stroke-dasharray', null).transition(t).attrTween('d', function (date) {\n          const previous = select(this).attr('d');\n          const current = linePath(date);\n          return interpolatePath(previous, current);\n        }));\n      } else {\n        /* DAILY TRENDS */\n        svg.selectAll('.trend').remove();\n        svg.selectAll('.stem').data(dates, date => date).join(enter => enter.append('line').attr('class', 'stem').attr('stroke-width', barWidth).attr('x1', date => xScale(parseIndiaDate(date))).attr('y1', chartBottom).attr('x2', date => xScale(parseIndiaDate(date))).attr('y2', chartBottom)).transition(t).attr('stroke-width', barWidth).attr('x1', date => xScale(parseIndiaDate(date))).attr('y1', yScale(0)).attr('x2', date => xScale(parseIndiaDate(date))).attr('y2', date => yScale(getStatistic(timeseries[date], chartType, statistic)));\n      }\n\n      svg.selectAll('*').attr('pointer-events', 'none');\n      svg.on('mousemove', mousemove).on('touchmove', mousemove).on('mouseout', mouseout).on('touchend', mouseout);\n    });\n  }, [chartType, dimensions, getBarWidth, isUniform, isLog, timeseries, dates]);\n  useEffect(() => {\n    const barWidth = getBarWidth();\n    refs.current.forEach(ref => {\n      const svg = select(ref);\n      svg.selectAll('circle').attr('r', date => date === highlightedDate ? barWidth : barWidth / 2);\n    });\n  }, [highlightedDate, getBarWidth]);\n  const getStatisticDelta = useCallback(statistic => {\n    if (!highlightedDate) return;\n    const currCount = getStatistic(timeseries === null || timeseries === void 0 ? void 0 : timeseries[highlightedDate], chartType, statistic);\n    const prevDate = dates[dates.findIndex(date => date === highlightedDate) - 1];\n    const prevCount = getStatistic(timeseries === null || timeseries === void 0 ? void 0 : timeseries[prevDate], chartType, statistic);\n    return currCount - prevCount;\n  }, [timeseries, dates, highlightedDate, chartType]);\n  const trail = useMemo(() => {\n    const styles = [];\n    [0, 0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Timeseries\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }\n  }, TIMESERIES_STATISTICS.map((statistic, index) => {\n    const delta = getStatisticDelta(statistic, index);\n    const statisticConfig = STATISTIC_CONFIGS[statistic];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: statistic,\n      className: classnames('svg-parent fadeInUp', `is-${statistic}`),\n      ref: wrapperRef,\n      style: trail[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }\n    }, highlightedDate && /*#__PURE__*/React.createElement(\"div\", {\n      className: classnames('stats', `is-${statistic}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 19\n      }\n    }, t(capitalize(statisticConfig.displayName))), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 19\n      }\n    }, formatDate(highlightedDate, 'dd MMMM')), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"stats-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 21\n      }\n    }, formatNumber(getStatistic(timeseries === null || timeseries === void 0 ? void 0 : timeseries[highlightedDate], chartType, statistic), statisticConfig.format !== 'short' ? statisticConfig.format : 'int', statistic)), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 21\n      }\n    }, `${delta > 0 ? '+' : ''}${formatNumber(delta, statisticConfig.format !== 'short' ? statisticConfig.format : 'int', statistic)}`))), /*#__PURE__*/React.createElement(\"svg\", {\n      ref: element => {\n        refs.current[index] = element;\n      },\n      preserveAspectRatio: \"xMidYMid meet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      className: \"x-axis\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      className: \"x-axis2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      className: \"y-axis\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }\n    })));\n  })));\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  } else if (!equal(currProps.isUniform, prevProps.isUniform)) {\n    return false;\n  } else if (!equal(currProps.isLog, prevProps.isLog)) {\n    return false;\n  } else if (!equal(currProps.regionHighlighted.stateCode, prevProps.regionHighlighted.stateCode)) {\n    return false;\n  } else if (!equal(currProps.regionHighlighted.districtName, prevProps.regionHighlighted.districtName)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default React.memo(Timeseries, isEqual);","map":{"version":3,"sources":["/home/ubuntu/myprojectdir/tracker/covid19india-react/src/components/Timeseries.js"],"names":["D3_TRANSITION_DURATION","STATISTIC_CONFIGS","TIMESERIES_STATISTICS","useResizeObserver","capitalize","formatNumber","formatDate","getStatistic","parseIndiaDate","classnames","min","max","bisector","axisBottom","axisRight","interpolatePath","scaleTime","scaleLinear","scaleLog","select","mouse","line","curveMonotoneX","transition","equal","React","useCallback","useEffect","useRef","useMemo","useState","useTranslation","margin","top","right","bottom","left","Timeseries","timeseries","dates","chartType","isUniform","isLog","t","refs","wrapperRef","dimensions","highlightedDate","setHighlightedDate","length","getBarWidth","T","width","current","getBoundingClientRect","chartRight","axisWidth","Math","height","chartBottom","barWidth","yBufferTop","yBufferBottom","xScale","clamp","domain","range","numTicksX","xAxis","g","attr","call","ticks","tickFormat","date","xAxis2","yScale","tickValues","tickSize","style","yAxis","num","tickPadding","uniformScaleMin","uniformScaleMax","yScaleUniformLinear","nice","yScaleUniformLog","generateYScale","statistic","mousemove","xm","invert","isNaN","bisectDate","index","dateLeft","dateRight","mouseout","forEach","ref","i","svg","duration","color","selectAll","data","join","enter","append","remove","linePath","curve","x","y","pathLength","getTotalLength","update","attrTween","previous","on","getStatisticDelta","currCount","prevDate","findIndex","prevCount","trail","styles","map","element","push","animationDelay","delta","statisticConfig","displayName","format","isEqual","prevProps","currProps","regionHighlighted","stateCode","districtName","memo"],"mappings":"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","sourcesContent":["import {\n  D3_TRANSITION_DURATION,\n  STATISTIC_CONFIGS,\n  TIMESERIES_STATISTICS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useResizeObserver';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  getStatistic,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {min, max, bisector} from 'd3-array';\nimport {axisBottom, axisRight} from 'd3-axis';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear, scaleLog} from 'd3-scale';\nimport {select, mouse} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\n// eslint-disable-next-line\nimport {transition} from 'd3-transition';\nimport equal from 'fast-deep-equal';\nimport React, {useCallback, useEffect, useRef, useMemo, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\n\n// Chart margins\nconst margin = {top: 15, right: 35, bottom: 25, left: 25};\n\nfunction Timeseries({timeseries, dates, chartType, isUniform, isLog}) {\n  const {t} = useTranslation();\n  const refs = useRef([]);\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const [highlightedDate, setHighlightedDate] = useState();\n\n  useEffect(() => {\n    setHighlightedDate(dates[dates.length - 1]);\n  }, [dates]);\n\n  const getBarWidth = useCallback(() => {\n    const T = dates.length;\n    // Dimensions\n    const {width} = dimensions || wrapperRef.current.getBoundingClientRect();\n    // Chart extremes\n    const chartRight = width - margin.right;\n    // Bar widths\n    const axisWidth = chartRight - margin.left;\n    return Math.min(4, axisWidth / (1.25 * T));\n  }, [dates.length, dimensions]);\n\n  useEffect(() => {\n    const T = dates.length;\n    // Dimensions\n    const {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n    // Chart extremes\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const barWidth = getBarWidth();\n\n    // Buffer space along y-axis\n    const yBufferTop = 1.2;\n    const yBufferBottom = 1.1;\n\n    const xScale = scaleTime()\n      .clamp(true)\n      .domain(T ? [parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])] : [])\n      .range([margin.left, chartRight]);\n\n    // Number of x-axis ticks\n    const numTicksX = width < 480 ? 4 : 7;\n\n    const xAxis = (g) =>\n      g.attr('class', 'x-axis').call(\n        axisBottom(xScale)\n          .ticks(numTicksX)\n          .tickFormat((date) => formatDate(date, 'dd MMM'))\n      );\n\n    const xAxis2 = (g, yScale) => {\n      g.attr('class', 'x-axis2')\n        .call(axisBottom(xScale).tickValues([]).tickSize(0))\n        .select('.domain')\n        .style('transform', `translateY(${yScale(0)}px)`);\n\n      if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n      else g.select('.domain').attr('opacity', 0);\n    };\n\n    const yAxis = (g, yScale) =>\n      g.attr('class', 'y-axis').call(\n        axisRight(yScale)\n          .ticks(4)\n          .tickFormat((num) => formatNumber(num, 'short'))\n          .tickPadding(4)\n      );\n\n    const uniformScaleMin = min(dates, (date) =>\n      getStatistic(timeseries[date], chartType, 'active')\n    );\n\n    const uniformScaleMax = max(dates, (date) =>\n      Math.max(\n        getStatistic(timeseries[date], chartType, 'confirmed'),\n        getStatistic(timeseries[date], chartType, 'recovered'),\n        getStatistic(timeseries[date], chartType, 'deceased')\n      )\n    );\n\n    const yScaleUniformLinear = scaleLinear()\n      .clamp(true)\n      .domain([uniformScaleMin, Math.max(1, yBufferTop * uniformScaleMax)])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const yScaleUniformLog = scaleLog()\n      .clamp(true)\n      .domain([\n        Math.max(1, uniformScaleMin),\n        Math.max(10, yBufferTop * uniformScaleMax),\n      ])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const generateYScale = (statistic) => {\n      if (isUniform && chartType === 'total' && isLog && statistic !== 'tested')\n        return yScaleUniformLog;\n\n      if (isUniform && statistic !== 'tested') return yScaleUniformLinear;\n\n      if (chartType === 'total' && isLog)\n        return scaleLog()\n          .clamp(true)\n          .domain([\n            Math.max(\n              1,\n              min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n            Math.max(\n              10,\n              yBufferTop *\n                max(dates, (date) =>\n                  getStatistic(timeseries[date], chartType, statistic)\n                )\n            ),\n          ])\n          .nice(4)\n          .range([chartBottom, margin.top]);\n\n      return scaleLinear()\n        .clamp(true)\n        .domain([\n          yBufferBottom *\n            Math.min(\n              0,\n              min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n          Math.max(\n            1,\n            yBufferTop *\n              max(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n          ),\n        ])\n        .nice(4)\n        .range([chartBottom, margin.top]);\n    };\n\n    function mousemove() {\n      const xm = mouse(this)[0];\n      const date = xScale.invert(xm);\n      if (!isNaN(date)) {\n        const bisectDate = bisector((date) => parseIndiaDate(date)).left;\n        const index = bisectDate(dates, date, 1);\n        const dateLeft = dates[index - 1];\n        const dateRight = dates[index];\n        setHighlightedDate(\n          date - parseIndiaDate(dateLeft) < parseIndiaDate(dateRight) - date\n            ? dateLeft\n            : dateRight\n        );\n      }\n    }\n\n    function mouseout() {\n      setHighlightedDate(dates[T - 1]);\n    }\n\n    /* Begin drawing charts */\n    refs.current.forEach((ref, i) => {\n      const svg = select(ref);\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n      const statistic = TIMESERIES_STATISTICS[i];\n      const yScale = generateYScale(statistic);\n      const color = STATISTIC_CONFIGS[statistic].color;\n\n      /* X axis */\n      svg\n        .select('.x-axis')\n        .style('transform', `translateY(${chartBottom}px)`)\n        .transition(t)\n        .call(xAxis);\n\n      svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n\n      /* Y axis */\n      svg\n        .select('.y-axis')\n        .style('transform', `translateX(${chartRight}px)`)\n        .transition(t)\n        .call(yAxis, yScale);\n\n      /* Path dots */\n      svg\n        .selectAll('circle')\n        .data(dates, (date) => date)\n        .join((enter) =>\n          enter\n            .append('circle')\n            .attr('fill', color)\n            .attr('stroke', color)\n            .attr('cy', chartBottom)\n            .attr('cx', (date) => xScale(parseIndiaDate(date)))\n            .attr('r', barWidth / 2)\n        )\n        .transition(t)\n        .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        .attr('cy', (date) =>\n          yScale(getStatistic(timeseries[date], chartType, statistic))\n        );\n\n      if (chartType === 'total') {\n        svg\n          .selectAll('.stem')\n          .transition(t)\n          .attr('y1', yScale(0))\n          .attr('y2', yScale(0))\n          .remove();\n\n        const linePath = line()\n          .curve(curveMonotoneX)\n          .x((date) => xScale(parseIndiaDate(date)))\n          .y((date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n\n        let pathLength;\n\n        svg\n          .selectAll('.trend')\n          .data(T ? [dates] : [])\n          .join(\n            (enter) =>\n              enter\n                .append('path')\n                .attr('class', 'trend')\n                .attr('fill', 'none')\n                .attr('stroke', color + '50')\n                .attr('stroke-width', 4)\n                .attr('d', linePath)\n                .attr('stroke-dasharray', function () {\n                  return (pathLength = this.getTotalLength());\n                })\n                .call((enter) =>\n                  enter\n                    .attr('stroke-dashoffset', pathLength)\n                    .transition(t)\n                    .attr('stroke-dashoffset', 0)\n                ),\n            (update) =>\n              update\n                .attr('stroke-dasharray', null)\n                .transition(t)\n                .attrTween('d', function (date) {\n                  const previous = select(this).attr('d');\n                  const current = linePath(date);\n                  return interpolatePath(previous, current);\n                })\n          );\n      } else {\n        /* DAILY TRENDS */\n        svg.selectAll('.trend').remove();\n\n        svg\n          .selectAll('.stem')\n          .data(dates, (date) => date)\n          .join((enter) =>\n            enter\n              .append('line')\n              .attr('class', 'stem')\n              .attr('stroke-width', barWidth)\n              .attr('x1', (date) => xScale(parseIndiaDate(date)))\n              .attr('y1', chartBottom)\n              .attr('x2', (date) => xScale(parseIndiaDate(date)))\n              .attr('y2', chartBottom)\n          )\n          .transition(t)\n          .attr('stroke-width', barWidth)\n          .attr('x1', (date) => xScale(parseIndiaDate(date)))\n          .attr('y1', yScale(0))\n          .attr('x2', (date) => xScale(parseIndiaDate(date)))\n          .attr('y2', (date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n      }\n\n      svg.selectAll('*').attr('pointer-events', 'none');\n      svg\n        .on('mousemove', mousemove)\n        .on('touchmove', mousemove)\n        .on('mouseout', mouseout)\n        .on('touchend', mouseout);\n    });\n  }, [chartType, dimensions, getBarWidth, isUniform, isLog, timeseries, dates]);\n\n  useEffect(() => {\n    const barWidth = getBarWidth();\n    refs.current.forEach((ref) => {\n      const svg = select(ref);\n      svg\n        .selectAll('circle')\n        .attr('r', (date) =>\n          date === highlightedDate ? barWidth : barWidth / 2\n        );\n    });\n  }, [highlightedDate, getBarWidth]);\n\n  const getStatisticDelta = useCallback(\n    (statistic) => {\n      if (!highlightedDate) return;\n      const currCount = getStatistic(\n        timeseries?.[highlightedDate],\n        chartType,\n        statistic\n      );\n      const prevDate =\n        dates[dates.findIndex((date) => date === highlightedDate) - 1];\n\n      const prevCount = getStatistic(\n        timeseries?.[prevDate],\n        chartType,\n        statistic\n      );\n      return currCount - prevCount;\n    },\n    [timeseries, dates, highlightedDate, chartType]\n  );\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"Timeseries\">\n        {TIMESERIES_STATISTICS.map((statistic, index) => {\n          const delta = getStatisticDelta(statistic, index);\n          const statisticConfig = STATISTIC_CONFIGS[statistic];\n          return (\n            <div\n              key={statistic}\n              className={classnames('svg-parent fadeInUp', `is-${statistic}`)}\n              ref={wrapperRef}\n              style={trail[index]}\n            >\n              {highlightedDate && (\n                <div className={classnames('stats', `is-${statistic}`)}>\n                  <h5 className=\"title\">\n                    {t(capitalize(statisticConfig.displayName))}\n                  </h5>\n                  <h5 className=\"title\">\n                    {formatDate(highlightedDate, 'dd MMMM')}\n                  </h5>\n                  <div className=\"stats-bottom\">\n                    <h2>\n                      {formatNumber(\n                        getStatistic(\n                          timeseries?.[highlightedDate],\n                          chartType,\n                          statistic\n                        ),\n                        statisticConfig.format !== 'short'\n                          ? statisticConfig.format\n                          : 'int',\n                        statistic\n                      )}\n                    </h2>\n                    <h6>{`${delta > 0 ? '+' : ''}${formatNumber(\n                      delta,\n                      statisticConfig.format !== 'short'\n                        ? statisticConfig.format\n                        : 'int',\n                      statistic\n                    )}`}</h6>\n                  </div>\n                </div>\n              )}\n              <svg\n                ref={(element) => {\n                  refs.current[index] = element;\n                }}\n                preserveAspectRatio=\"xMidYMid meet\"\n              >\n                <g className=\"x-axis\" />\n                <g className=\"x-axis2\" />\n                <g className=\"y-axis\" />\n              </svg>\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  } else if (!equal(currProps.isUniform, prevProps.isUniform)) {\n    return false;\n  } else if (!equal(currProps.isLog, prevProps.isLog)) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.districtName,\n      prevProps.regionHighlighted.districtName\n    )\n  ) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Timeseries, isEqual);\n"]},"metadata":{},"sourceType":"module"}