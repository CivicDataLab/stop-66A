{"version":3,"sources":["hooks/useIsVisible.js","components/CaseBarGraph.js"],"names":["OPTIONS","root","rootMargin","threshold","useIsVisible","elementRef","useState","isVisible","setIsVisible","useEffect","current","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","unobserve","observe","margin","roundedBar","x","y","w","h","r","Math","sign","min","abs","join","React","memo","timeseries","statistic","lookback","svgRef","useRef","useMeasure","wrapperRef","width","height","dates","Object","keys","filter","date","getIndiaYesterdayISO","slice","svg","select","chartRight","chartBottom","xScale","scaleBand","domain","map","d","name","range","paddingInner","yScale","scaleLinear","max","value","xAxis","axisBottom","tickSize","t","transition","duration","D3_TRANSITION_DURATION","style","call","on","remove","selectAll","attr","i","data","enter","append","bandwidth","text","val","className","ref","viewBox","preserveAspectRatio","prevProps","currProps","forceRender","equal","stateCode"],"mappings":"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","file":"static/js/6.85169c9d.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst OPTIONS = {\n  root: null,\n  rootMargin: '0px 0px 0px 0px',\n  threshold: 0,\n};\n\nconst useIsVisible = (elementRef) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    if (elementRef.current) {\n      const observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setIsVisible(true);\n            observer.unobserve(elementRef.current);\n          }\n        });\n      }, OPTIONS);\n      observer.observe(elementRef.current);\n    }\n  }, [elementRef]);\n\n  return isVisible;\n};\n\nexport default useIsVisible;\n","import {STATISTIC_CONFIGS, D3_TRANSITION_DURATION} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  getIndiaYesterdayISO,\n  getStatistic,\n} from '../utils/commonFunctions';\n\nimport {min, max} from 'd3-array';\nimport {axisBottom} from 'd3-axis';\nimport {scaleBand, scaleLinear} from 'd3-scale';\nimport {select} from 'd3-selection';\n// eslint-disable-next-line\nimport {transition} from 'd3-transition';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef} from 'react';\nimport {useMeasure} from 'react-use';\n\nconst getDeltaStatistic = (data, statistic) => {\n  return getStatistic(data, 'delta', statistic);\n};\n\nconst margin = {top: 50, right: 0, bottom: 50, left: 0};\n\nfunction CaseBarGraph({timeseries, statistic, lookback}) {\n  const svgRef = useRef();\n  const [wrapperRef, {width, height}] = useMeasure();\n\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaYesterdayISO()\n  );\n  const dates = pastDates.slice(-lookback);\n\n  useEffect(() => {\n    if (!width) return;\n    const svg = select(svgRef.current);\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const r = 5;\n\n    // const formatTime = timeFormat('%e %b');\n    const xScale = scaleBand()\n      .domain(timeseries.map(function (d) {return d.name;}))\n      .range([margin.left, chartRight])\n      .paddingInner(width / 1000);\n\n    const yScale = scaleLinear()\n      .domain([0, max(timeseries, function(d) {return d.value;})])\n      .range([chartBottom, margin.top]);\n\n    const xAxis = axisBottom(xScale)\n      .tickSize(0);\n\n    const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n    svg\n      .select('.x-axis')\n      .transition(t)\n      .style('transform', `translateY(${yScale(0)}px)`)\n      .call(xAxis)\n      .on('start', () => svg.select('.domain').remove())\n      .selectAll('text')\n      .attr('y', 0)\n      .attr('dy', (d, i) =>\n        d.value < 0 ? '-1em' : '1.5em'\n      )\n      .style('text-anchor', 'middle')\n      .attr('fill', \"#343a40\");\n\n    svg\n      .selectAll('.bar')\n      .data(timeseries)\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('class', 'bar')\n          .attr('d', (d) =>\n            roundedBar(xScale(d.name), yScale(0), xScale.bandwidth(), 0, r)\n          )\n      )\n      .transition(t)\n      .attr('d', (d) =>\n        roundedBar(\n          xScale(d.name),\n          yScale(0),\n          xScale.bandwidth(),\n          yScale(0) - yScale(d.value),\n          r\n        )\n      )\n      .attr('fill', \"#007bff\"); \n\n\n    const textSelection = svg\n      .selectAll('.label')\n      .data(timeseries)\n      .join('text')\n      .attr('class', 'label')\n      .attr('x', (d) => xScale(d.name) + xScale.bandwidth() / 2)\n      .text((d) => d.value);\n\n    textSelection\n      .transition(t)\n      .attr('fill', \"#343a40\")\n      .attr('y', (d) => {\n        const val = d.value;\n        return yScale(val) + (val < 0 ? 15 : -6);\n      });\n\n  }, [dates, height, statistic, timeseries, width]);\n\n  return (\n    <div className=\"DeltaBarGraph\" ref={wrapperRef}>\n      <svg\n        ref={svgRef}\n        width={width}\n        height={400}\n        viewBox={`0 0 ${width} ${height}`}\n        preserveAspectRatio=\"xMidYMid meet\"\n      >\n        <g className=\"x-axis\" />\n        <g className=\"y-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(prevProps.stateCode, currProps.stateCode)) {\n    return false;\n  } else if (!equal(prevProps.lookback, currProps.lookback)) {\n    return false;\n  } else if (!equal(prevProps.statistic, currProps.statistic)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(CaseBarGraph, isEqual);\n\nfunction roundedBar(x, y, w, h, r) {\n  r = Math.sign(h) * Math.min(Math.abs(h), r);\n  const paths = [\n    `M ${x} ${y}`,\n    `v ${-h + r}`,\n    `q 0 ${-r} ${Math.abs(r)} ${-r}`,\n    `h ${w - 2 * Math.abs(r)}`,\n    `q ${Math.abs(r)} 0 ${Math.abs(r)} ${r}`,\n    `v ${h - r}`,\n    'Z',\n  ];\n  return paths.join(' ');\n}\n"],"sourceRoot":""}